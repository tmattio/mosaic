(data_only_dirs syntaxes)

(library
 (name mosaic_syntax)
 (public_name mosaic.syntax)
 (libraries textmate-language mosaic.ui mosaic.ansi yojson))

(rule
 (mode promote)
 (target grammars.ml)
 (deps
  tm-syntaxes/ocaml.interface.json
  tm-syntaxes/ocaml.json
  tm-syntaxes/dune.json
  tm-syntaxes/shell.json
  tm-syntaxes/diff.json)
 (action
  (with-stdout-to
   %{target}
   (progn
    (echo "let ocaml_interface =\n")
    (run pp/pp.exe tm-syntaxes/ocaml.interface.json)
    (echo "\n\n")
    (echo "let ocaml =\n")
    (run pp/pp.exe tm-syntaxes/ocaml.json)
    (echo "\n\n")
    (echo "let dune =\n")
    (run pp/pp.exe tm-syntaxes/dune.json)
    (echo "\n\n")
    (echo "let shell =\n")
    (run pp/pp.exe tm-syntaxes/shell.json)
    (echo "\n\n")
    (echo "let diff =\n")
    (run pp/pp.exe tm-syntaxes/diff.json)
    (echo "\n")))))

(rule
 (mode promote)
 (target themes.ml)
 (deps
  tm-themes/dracula.json
  tm-themes/solarized-dark.json
  tm-themes/solarized-light.json)
 (action
  (with-stdout-to
   %{target}
   (progn
    (echo "let dracula =\n")
    (run pp/pp.exe tm-themes/dracula.json)
    (echo "\n\n")
    (echo "let solarized_dark =\n")
    (run pp/pp.exe tm-themes/solarized-dark.json)
    (echo "\n\n")
    (echo "let solarized_light =\n")
    (run pp/pp.exe tm-themes/solarized-light.json)
    (echo "\n")))))
