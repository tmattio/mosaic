
(* Generated test for flex_grow_0_min_size in flex layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee

(* Test context for nodes *)
module MeasureFunction = struct
  type t = 
    | Fixed of float Toffee.Geometry.size
    | Text of string
  [@@warning "-37"]
end


(* Test measure function *)
let measure_function ~known_dimensions:_ ~available_space:_ _node_id node_context _style =
  match node_context with
  | Some (MeasureFunction.Fixed size) -> size
  | Some (MeasureFunction.Text _) -> { width = 100.0; height = 20.0 }  (* Placeholder *)
  | None -> { width = 0.0; height = 0.0 }




let test_flex_grow_0_min_size_border_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in
  
  let tree = Toffee.create () in
  
  
  (* Create nodes *)
  let node = Toffee.new_leaf tree ({ Toffee.Style.default with display = Toffee.Style.Flex; flex_direction = Toffee.Style.Flex.Row; size = { width = Toffee.Style.Dimension.length 400.0; height = Toffee.Style.Dimension.length 100.0 }; border = { left = Toffee.Style.Length_percentage.Length (1.0); right = Toffee.Style.Length_percentage.Length (1.0); top = Toffee.Style.Length_percentage.Length (1.0); bottom = Toffee.Style.Length_percentage.Length (1.0) } }) in
  let node0 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_grow = 0.0; flex_shrink = 0.0; flex_basis = Toffee.Style.Dimension.percent 0.0 }) in
  let _ = Toffee.set_node_context tree node0 (MeasureFunction.Fixed {width = 30.0; height = 10.0}) |> Result.get_ok in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_grow = 0.0; flex_shrink = 0.0; flex_basis = Toffee.Style.Dimension.percent 0.0 }) in
  let _ = Toffee.set_node_context tree node1 (MeasureFunction.Fixed {width = 30.0; height = 10.0}) |> Result.get_ok in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in
  let node2 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_grow = 0.0; flex_shrink = 0.0; flex_basis = Toffee.Style.Dimension.percent 0.0 }) in
  let _ = Toffee.set_node_context tree node2 (MeasureFunction.Fixed {width = 50.0; height = 10.0}) |> Result.get_ok in
  let _ = Toffee.add_child tree node node2 |> Result.get_ok in
  let node3 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_grow = 0.0; flex_shrink = 0.0; flex_basis = Toffee.Style.Dimension.percent 0.0 }) in
  let _ = Toffee.set_node_context tree node3 (MeasureFunction.Fixed {width = 40.0; height = 10.0}) |> Result.get_ok in
  let _ = Toffee.add_child tree node node3 |> Result.get_ok in
  
  (* Compute layout *)
  let _ = Toffee.compute_layout_with_measure tree node {
    width = Toffee.Style.Available_space.Max_content;
    height = Toffee.Style.Available_space.Max_content;
  } measure_function |> Result.get_ok in
  
  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";
  
  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 400.0 layout.size.width;
  assert_eq ~msg:"height of node" 100.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 30.0 layout.size.width;
  assert_eq ~msg:"height of node0" 98.0 layout.size.height;
  assert_eq ~msg:"x of node0" 1.0 layout.location.x;
  assert_eq ~msg:"y of node0" 1.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 30.0 layout.size.width;
  assert_eq ~msg:"height of node1" 98.0 layout.size.height;
  assert_eq ~msg:"x of node1" 31.0 layout.location.x;
  assert_eq ~msg:"y of node1" 1.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 50.0 layout.size.width;
  assert_eq ~msg:"height of node2" 98.0 layout.size.height;
  assert_eq ~msg:"x of node2" 61.0 layout.location.x;
  assert_eq ~msg:"y of node2" 1.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 40.0 layout.size.width;
  assert_eq ~msg:"height of node3" 98.0 layout.size.height;
  assert_eq ~msg:"x of node3" 111.0 layout.location.x;
  assert_eq ~msg:"y of node3" 1.0 layout.location.y;
  ()



let test_flex_grow_0_min_size_content_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in
  
  let tree = Toffee.create () in
  
  
  (* Create nodes *)
  let node = Toffee.new_leaf tree ({ Toffee.Style.default with display = Toffee.Style.Flex; flex_direction = Toffee.Style.Flex.Row; size = { width = Toffee.Style.Dimension.length 400.0; height = Toffee.Style.Dimension.length 100.0 }; border = { left = Toffee.Style.Length_percentage.Length (1.0); right = Toffee.Style.Length_percentage.Length (1.0); top = Toffee.Style.Length_percentage.Length (1.0); bottom = Toffee.Style.Length_percentage.Length (1.0) }; box_sizing = Toffee.Style.Content_box }) in
  let node0 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_grow = 0.0; flex_shrink = 0.0; flex_basis = Toffee.Style.Dimension.percent 0.0; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.set_node_context tree node0 (MeasureFunction.Fixed {width = 30.0; height = 10.0}) |> Result.get_ok in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_grow = 0.0; flex_shrink = 0.0; flex_basis = Toffee.Style.Dimension.percent 0.0; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.set_node_context tree node1 (MeasureFunction.Fixed {width = 30.0; height = 10.0}) |> Result.get_ok in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in
  let node2 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_grow = 0.0; flex_shrink = 0.0; flex_basis = Toffee.Style.Dimension.percent 0.0; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.set_node_context tree node2 (MeasureFunction.Fixed {width = 50.0; height = 10.0}) |> Result.get_ok in
  let _ = Toffee.add_child tree node node2 |> Result.get_ok in
  let node3 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_grow = 0.0; flex_shrink = 0.0; flex_basis = Toffee.Style.Dimension.percent 0.0; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.set_node_context tree node3 (MeasureFunction.Fixed {width = 40.0; height = 10.0}) |> Result.get_ok in
  let _ = Toffee.add_child tree node node3 |> Result.get_ok in
  
  (* Compute layout *)
  let _ = Toffee.compute_layout_with_measure tree node {
    width = Toffee.Style.Available_space.Max_content;
    height = Toffee.Style.Available_space.Max_content;
  } measure_function |> Result.get_ok in
  
  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";
  
  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 402.0 layout.size.width;
  assert_eq ~msg:"height of node" 102.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 30.0 layout.size.width;
  assert_eq ~msg:"height of node0" 100.0 layout.size.height;
  assert_eq ~msg:"x of node0" 1.0 layout.location.x;
  assert_eq ~msg:"y of node0" 1.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 30.0 layout.size.width;
  assert_eq ~msg:"height of node1" 100.0 layout.size.height;
  assert_eq ~msg:"x of node1" 31.0 layout.location.x;
  assert_eq ~msg:"y of node1" 1.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 50.0 layout.size.width;
  assert_eq ~msg:"height of node2" 100.0 layout.size.height;
  assert_eq ~msg:"x of node2" 61.0 layout.location.x;
  assert_eq ~msg:"y of node2" 1.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 40.0 layout.size.width;
  assert_eq ~msg:"height of node3" 100.0 layout.size.height;
  assert_eq ~msg:"x of node3" 111.0 layout.location.x;
  assert_eq ~msg:"y of node3" 1.0 layout.location.y;
  ()


(* Test runner *)
let () =
  let open Alcotest in
  run "Toffee flex_grow_0_min_size Test" [
    "flex_flex_grow_0_min_size", [
      test_case "flex_grow_0_min_size (border-box)" `Quick test_flex_grow_0_min_size_border_box;
      test_case "flex_grow_0_min_size (content-box)" `Quick test_flex_grow_0_min_size_content_box;
    ];
  ]
