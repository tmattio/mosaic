(* Generated test for block_absolute_resolved_insets in block layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee

let test_block_absolute_resolved_insets_border_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = Toffee.create () in

  (* Create nodes *)
  let node =
    Toffee.new_leaf tree
      { Toffee.Style.default with display = Toffee.Style.Block }
  in
  let node0 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Relative;
        size =
          {
            width = Toffee.Style.Dimension.length 200.0;
            height = Toffee.Style.Dimension.length 200.0;
          };
        padding =
          {
            left = Toffee.Style.Length_percentage.Length 15.0;
            right = Toffee.Style.Length_percentage.Length 15.0;
            top = Toffee.Style.Length_percentage.Length 15.0;
            bottom = Toffee.Style.Length_percentage.Length 15.0;
          };
        border =
          {
            left = Toffee.Style.Length_percentage.Length 20.0;
            right = Toffee.Style.Length_percentage.Length 20.0;
            top = Toffee.Style.Length_percentage.Length 20.0;
            bottom = Toffee.Style.Length_percentage.Length 20.0;
          };
      }
  in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Auto;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Auto;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
      }
  in
  let _ = Toffee.add_child tree node0 node1 |> Result.get_ok in
  let node2 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Length 0.0;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Length 0.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
      }
  in
  let _ = Toffee.add_child tree node0 node2 |> Result.get_ok in
  let node3 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Percent 1.0;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Percent 1.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
      }
  in
  let _ = Toffee.add_child tree node0 node3 |> Result.get_ok in
  let node4 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Auto;
            right = Toffee.Style.Length_percentage_auto.Percent 1.0;
            top = Toffee.Style.Length_percentage_auto.Auto;
            bottom = Toffee.Style.Length_percentage_auto.Percent 1.0;
          };
      }
  in
  let _ = Toffee.add_child tree node0 node4 |> Result.get_ok in
  let node5 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Length 30.0;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Length 30.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
      }
  in
  let _ = Toffee.add_child tree node0 node5 |> Result.get_ok in
  let node6 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        size =
          {
            width = Toffee.Style.Dimension.percent 1.0;
            height = Toffee.Style.Dimension.percent 1.0;
          };
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Length 0.0;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Length 0.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
      }
  in
  let _ = Toffee.add_child tree node0 node6 |> Result.get_ok in
  let node7 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Relative;
        size =
          {
            width = Toffee.Style.Dimension.length 200.0;
            height = Toffee.Style.Dimension.length 200.0;
          };
        padding =
          {
            left = Toffee.Style.Length_percentage.Length 15.0;
            right = Toffee.Style.Length_percentage.Length 15.0;
            top = Toffee.Style.Length_percentage.Length 15.0;
            bottom = Toffee.Style.Length_percentage.Length 15.0;
          };
        border =
          {
            left = Toffee.Style.Length_percentage.Length 20.0;
            right = Toffee.Style.Length_percentage.Length 20.0;
            top = Toffee.Style.Length_percentage.Length 20.0;
            bottom = Toffee.Style.Length_percentage.Length 20.0;
          };
      }
  in
  let _ = Toffee.add_child tree node node7 |> Result.get_ok in
  let node8 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Auto;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Auto;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
      }
  in
  let _ = Toffee.add_child tree node7 node8 |> Result.get_ok in
  let node9 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Length 0.0;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Length 0.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
      }
  in
  let _ = Toffee.add_child tree node7 node9 |> Result.get_ok in
  let node10 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Percent 1.0;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Percent 1.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
      }
  in
  let _ = Toffee.add_child tree node7 node10 |> Result.get_ok in
  let node11 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Auto;
            right = Toffee.Style.Length_percentage_auto.Percent 1.0;
            top = Toffee.Style.Length_percentage_auto.Auto;
            bottom = Toffee.Style.Length_percentage_auto.Percent 1.0;
          };
      }
  in
  let _ = Toffee.add_child tree node7 node11 |> Result.get_ok in
  let node12 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Length 30.0;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Length 30.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
      }
  in
  let _ = Toffee.add_child tree node7 node12 |> Result.get_ok in
  let node13 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        size =
          {
            width = Toffee.Style.Dimension.percent 1.0;
            height = Toffee.Style.Dimension.percent 1.0;
          };
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Length 0.0;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Length 0.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
      }
  in
  let _ = Toffee.add_child tree node7 node13 |> Result.get_ok in
  let node14 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Relative;
        size =
          {
            width = Toffee.Style.Dimension.length 200.0;
            height = Toffee.Style.Dimension.length 200.0;
          };
        padding =
          {
            left = Toffee.Style.Length_percentage.Length 15.0;
            right = Toffee.Style.Length_percentage.Length 15.0;
            top = Toffee.Style.Length_percentage.Length 15.0;
            bottom = Toffee.Style.Length_percentage.Length 15.0;
          };
        border =
          {
            left = Toffee.Style.Length_percentage.Length 20.0;
            right = Toffee.Style.Length_percentage.Length 20.0;
            top = Toffee.Style.Length_percentage.Length 20.0;
            bottom = Toffee.Style.Length_percentage.Length 20.0;
          };
      }
  in
  let _ = Toffee.add_child tree node node14 |> Result.get_ok in
  let node15 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        size =
          {
            width = Toffee.Style.Dimension.length 50.0;
            height = Toffee.Style.Dimension.length 10.0;
          };
      }
  in
  let _ = Toffee.add_child tree node14 node15 |> Result.get_ok in
  let node16 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Auto;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Auto;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
      }
  in
  let _ = Toffee.add_child tree node14 node16 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    Toffee.compute_layout tree node
      {
        width = Toffee.Style.Available_space.Max_content;
        height = Toffee.Style.Available_space.Max_content;
      }
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 600.0 layout.size.width;
  assert_eq ~msg:"height of node" 200.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 200.0 layout.size.width;
  assert_eq ~msg:"height of node0" 200.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 0.0 layout.size.width;
  assert_eq ~msg:"height of node1" 0.0 layout.size.height;
  assert_eq ~msg:"x of node1" 35.0 layout.location.x;
  assert_eq ~msg:"y of node1" 35.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 0.0 layout.size.width;
  assert_eq ~msg:"height of node2" 0.0 layout.size.height;
  assert_eq ~msg:"x of node2" 20.0 layout.location.x;
  assert_eq ~msg:"y of node2" 20.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 0.0 layout.size.width;
  assert_eq ~msg:"height of node3" 0.0 layout.size.height;
  assert_eq ~msg:"x of node3" 180.0 layout.location.x;
  assert_eq ~msg:"y of node3" 180.0 layout.location.y;
  let layout = Toffee.layout tree node4 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node4" 0.0 layout.size.width;
  assert_eq ~msg:"height of node4" 0.0 layout.size.height;
  assert_eq ~msg:"x of node4" 20.0 layout.location.x;
  assert_eq ~msg:"y of node4" 20.0 layout.location.y;
  let layout = Toffee.layout tree node5 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node5" 0.0 layout.size.width;
  assert_eq ~msg:"height of node5" 0.0 layout.size.height;
  assert_eq ~msg:"x of node5" 50.0 layout.location.x;
  assert_eq ~msg:"y of node5" 50.0 layout.location.y;
  let layout = Toffee.layout tree node6 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node6" 160.0 layout.size.width;
  assert_eq ~msg:"height of node6" 160.0 layout.size.height;
  assert_eq ~msg:"x of node6" 20.0 layout.location.x;
  assert_eq ~msg:"y of node6" 20.0 layout.location.y;
  let layout = Toffee.layout tree node7 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node7" 200.0 layout.size.width;
  assert_eq ~msg:"height of node7" 200.0 layout.size.height;
  assert_eq ~msg:"x of node7" 200.0 layout.location.x;
  assert_eq ~msg:"y of node7" 0.0 layout.location.y;
  let layout = Toffee.layout tree node8 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node8" 0.0 layout.size.width;
  assert_eq ~msg:"height of node8" 0.0 layout.size.height;
  assert_eq ~msg:"x of node8" 35.0 layout.location.x;
  assert_eq ~msg:"y of node8" 35.0 layout.location.y;
  let layout = Toffee.layout tree node9 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node9" 0.0 layout.size.width;
  assert_eq ~msg:"height of node9" 0.0 layout.size.height;
  assert_eq ~msg:"x of node9" 20.0 layout.location.x;
  assert_eq ~msg:"y of node9" 20.0 layout.location.y;
  let layout = Toffee.layout tree node10 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node10" 0.0 layout.size.width;
  assert_eq ~msg:"height of node10" 0.0 layout.size.height;
  assert_eq ~msg:"x of node10" 180.0 layout.location.x;
  assert_eq ~msg:"y of node10" 180.0 layout.location.y;
  let layout = Toffee.layout tree node11 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node11" 0.0 layout.size.width;
  assert_eq ~msg:"height of node11" 0.0 layout.size.height;
  assert_eq ~msg:"x of node11" 20.0 layout.location.x;
  assert_eq ~msg:"y of node11" 20.0 layout.location.y;
  let layout = Toffee.layout tree node12 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node12" 0.0 layout.size.width;
  assert_eq ~msg:"height of node12" 0.0 layout.size.height;
  assert_eq ~msg:"x of node12" 50.0 layout.location.x;
  assert_eq ~msg:"y of node12" 50.0 layout.location.y;
  let layout = Toffee.layout tree node13 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node13" 160.0 layout.size.width;
  assert_eq ~msg:"height of node13" 160.0 layout.size.height;
  assert_eq ~msg:"x of node13" 20.0 layout.location.x;
  assert_eq ~msg:"y of node13" 20.0 layout.location.y;
  let layout = Toffee.layout tree node14 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node14" 200.0 layout.size.width;
  assert_eq ~msg:"height of node14" 200.0 layout.size.height;
  assert_eq ~msg:"x of node14" 400.0 layout.location.x;
  assert_eq ~msg:"y of node14" 0.0 layout.location.y;
  let layout = Toffee.layout tree node15 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node15" 50.0 layout.size.width;
  assert_eq ~msg:"height of node15" 10.0 layout.size.height;
  assert_eq ~msg:"x of node15" 35.0 layout.location.x;
  assert_eq ~msg:"y of node15" 35.0 layout.location.y;
  let layout = Toffee.layout tree node16 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node16" 0.0 layout.size.width;
  assert_eq ~msg:"height of node16" 0.0 layout.size.height;
  assert_eq ~msg:"x of node16" 35.0 layout.location.x;
  assert_eq ~msg:"y of node16" 45.0 layout.location.y;
  ()

let test_block_absolute_resolved_insets_content_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = Toffee.create () in

  (* Create nodes *)
  let node =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let node0 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Relative;
        size =
          {
            width = Toffee.Style.Dimension.length 200.0;
            height = Toffee.Style.Dimension.length 200.0;
          };
        padding =
          {
            left = Toffee.Style.Length_percentage.Length 15.0;
            right = Toffee.Style.Length_percentage.Length 15.0;
            top = Toffee.Style.Length_percentage.Length 15.0;
            bottom = Toffee.Style.Length_percentage.Length 15.0;
          };
        border =
          {
            left = Toffee.Style.Length_percentage.Length 20.0;
            right = Toffee.Style.Length_percentage.Length 20.0;
            top = Toffee.Style.Length_percentage.Length 20.0;
            bottom = Toffee.Style.Length_percentage.Length 20.0;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Auto;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Auto;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node0 node1 |> Result.get_ok in
  let node2 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Length 0.0;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Length 0.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node0 node2 |> Result.get_ok in
  let node3 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Percent 1.0;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Percent 1.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node0 node3 |> Result.get_ok in
  let node4 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Auto;
            right = Toffee.Style.Length_percentage_auto.Percent 1.0;
            top = Toffee.Style.Length_percentage_auto.Auto;
            bottom = Toffee.Style.Length_percentage_auto.Percent 1.0;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node0 node4 |> Result.get_ok in
  let node5 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Length 30.0;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Length 30.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node0 node5 |> Result.get_ok in
  let node6 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        size =
          {
            width = Toffee.Style.Dimension.percent 1.0;
            height = Toffee.Style.Dimension.percent 1.0;
          };
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Length 0.0;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Length 0.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node0 node6 |> Result.get_ok in
  let node7 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Relative;
        size =
          {
            width = Toffee.Style.Dimension.length 200.0;
            height = Toffee.Style.Dimension.length 200.0;
          };
        padding =
          {
            left = Toffee.Style.Length_percentage.Length 15.0;
            right = Toffee.Style.Length_percentage.Length 15.0;
            top = Toffee.Style.Length_percentage.Length 15.0;
            bottom = Toffee.Style.Length_percentage.Length 15.0;
          };
        border =
          {
            left = Toffee.Style.Length_percentage.Length 20.0;
            right = Toffee.Style.Length_percentage.Length 20.0;
            top = Toffee.Style.Length_percentage.Length 20.0;
            bottom = Toffee.Style.Length_percentage.Length 20.0;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node node7 |> Result.get_ok in
  let node8 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Auto;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Auto;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node7 node8 |> Result.get_ok in
  let node9 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Length 0.0;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Length 0.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node7 node9 |> Result.get_ok in
  let node10 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Percent 1.0;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Percent 1.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node7 node10 |> Result.get_ok in
  let node11 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Auto;
            right = Toffee.Style.Length_percentage_auto.Percent 1.0;
            top = Toffee.Style.Length_percentage_auto.Auto;
            bottom = Toffee.Style.Length_percentage_auto.Percent 1.0;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node7 node11 |> Result.get_ok in
  let node12 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Length 30.0;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Length 30.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node7 node12 |> Result.get_ok in
  let node13 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        size =
          {
            width = Toffee.Style.Dimension.percent 1.0;
            height = Toffee.Style.Dimension.percent 1.0;
          };
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Length 0.0;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Length 0.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node7 node13 |> Result.get_ok in
  let node14 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Relative;
        size =
          {
            width = Toffee.Style.Dimension.length 200.0;
            height = Toffee.Style.Dimension.length 200.0;
          };
        padding =
          {
            left = Toffee.Style.Length_percentage.Length 15.0;
            right = Toffee.Style.Length_percentage.Length 15.0;
            top = Toffee.Style.Length_percentage.Length 15.0;
            bottom = Toffee.Style.Length_percentage.Length 15.0;
          };
        border =
          {
            left = Toffee.Style.Length_percentage.Length 20.0;
            right = Toffee.Style.Length_percentage.Length 20.0;
            top = Toffee.Style.Length_percentage.Length 20.0;
            bottom = Toffee.Style.Length_percentage.Length 20.0;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node node14 |> Result.get_ok in
  let node15 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        size =
          {
            width = Toffee.Style.Dimension.length 50.0;
            height = Toffee.Style.Dimension.length 10.0;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node14 node15 |> Result.get_ok in
  let node16 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        position = Toffee.Style.Absolute;
        inset =
          {
            left = Toffee.Style.Length_percentage_auto.Auto;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Auto;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node14 node16 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    Toffee.compute_layout tree node
      {
        width = Toffee.Style.Available_space.Max_content;
        height = Toffee.Style.Available_space.Max_content;
      }
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 810.0 layout.size.width;
  assert_eq ~msg:"height of node" 270.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 270.0 layout.size.width;
  assert_eq ~msg:"height of node0" 270.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 0.0 layout.size.width;
  assert_eq ~msg:"height of node1" 0.0 layout.size.height;
  assert_eq ~msg:"x of node1" 35.0 layout.location.x;
  assert_eq ~msg:"y of node1" 35.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 0.0 layout.size.width;
  assert_eq ~msg:"height of node2" 0.0 layout.size.height;
  assert_eq ~msg:"x of node2" 20.0 layout.location.x;
  assert_eq ~msg:"y of node2" 20.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 0.0 layout.size.width;
  assert_eq ~msg:"height of node3" 0.0 layout.size.height;
  assert_eq ~msg:"x of node3" 250.0 layout.location.x;
  assert_eq ~msg:"y of node3" 250.0 layout.location.y;
  let layout = Toffee.layout tree node4 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node4" 0.0 layout.size.width;
  assert_eq ~msg:"height of node4" 0.0 layout.size.height;
  assert_eq ~msg:"x of node4" 20.0 layout.location.x;
  assert_eq ~msg:"y of node4" 20.0 layout.location.y;
  let layout = Toffee.layout tree node5 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node5" 0.0 layout.size.width;
  assert_eq ~msg:"height of node5" 0.0 layout.size.height;
  assert_eq ~msg:"x of node5" 50.0 layout.location.x;
  assert_eq ~msg:"y of node5" 50.0 layout.location.y;
  let layout = Toffee.layout tree node6 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node6" 230.0 layout.size.width;
  assert_eq ~msg:"height of node6" 230.0 layout.size.height;
  assert_eq ~msg:"x of node6" 20.0 layout.location.x;
  assert_eq ~msg:"y of node6" 20.0 layout.location.y;
  let layout = Toffee.layout tree node7 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node7" 270.0 layout.size.width;
  assert_eq ~msg:"height of node7" 270.0 layout.size.height;
  assert_eq ~msg:"x of node7" 270.0 layout.location.x;
  assert_eq ~msg:"y of node7" 0.0 layout.location.y;
  let layout = Toffee.layout tree node8 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node8" 0.0 layout.size.width;
  assert_eq ~msg:"height of node8" 0.0 layout.size.height;
  assert_eq ~msg:"x of node8" 35.0 layout.location.x;
  assert_eq ~msg:"y of node8" 35.0 layout.location.y;
  let layout = Toffee.layout tree node9 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node9" 0.0 layout.size.width;
  assert_eq ~msg:"height of node9" 0.0 layout.size.height;
  assert_eq ~msg:"x of node9" 20.0 layout.location.x;
  assert_eq ~msg:"y of node9" 20.0 layout.location.y;
  let layout = Toffee.layout tree node10 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node10" 0.0 layout.size.width;
  assert_eq ~msg:"height of node10" 0.0 layout.size.height;
  assert_eq ~msg:"x of node10" 250.0 layout.location.x;
  assert_eq ~msg:"y of node10" 250.0 layout.location.y;
  let layout = Toffee.layout tree node11 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node11" 0.0 layout.size.width;
  assert_eq ~msg:"height of node11" 0.0 layout.size.height;
  assert_eq ~msg:"x of node11" 20.0 layout.location.x;
  assert_eq ~msg:"y of node11" 20.0 layout.location.y;
  let layout = Toffee.layout tree node12 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node12" 0.0 layout.size.width;
  assert_eq ~msg:"height of node12" 0.0 layout.size.height;
  assert_eq ~msg:"x of node12" 50.0 layout.location.x;
  assert_eq ~msg:"y of node12" 50.0 layout.location.y;
  let layout = Toffee.layout tree node13 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node13" 230.0 layout.size.width;
  assert_eq ~msg:"height of node13" 230.0 layout.size.height;
  assert_eq ~msg:"x of node13" 20.0 layout.location.x;
  assert_eq ~msg:"y of node13" 20.0 layout.location.y;
  let layout = Toffee.layout tree node14 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node14" 270.0 layout.size.width;
  assert_eq ~msg:"height of node14" 270.0 layout.size.height;
  assert_eq ~msg:"x of node14" 540.0 layout.location.x;
  assert_eq ~msg:"y of node14" 0.0 layout.location.y;
  let layout = Toffee.layout tree node15 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node15" 50.0 layout.size.width;
  assert_eq ~msg:"height of node15" 10.0 layout.size.height;
  assert_eq ~msg:"x of node15" 35.0 layout.location.x;
  assert_eq ~msg:"y of node15" 35.0 layout.location.y;
  let layout = Toffee.layout tree node16 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node16" 0.0 layout.size.width;
  assert_eq ~msg:"height of node16" 0.0 layout.size.height;
  assert_eq ~msg:"x of node16" 35.0 layout.location.x;
  assert_eq ~msg:"y of node16" 45.0 layout.location.y;
  ()

(* Export tests for aggregation *)
let tests =
  let open Alcotest in
  [
    test_case "absolute_resolved_insets (border-box)" `Quick
      test_block_absolute_resolved_insets_border_box;
    test_case "absolute_resolved_insets (content-box)" `Quick
      test_block_absolute_resolved_insets_content_box;
  ]
