(* Generated test for grid_span_13_most_non_flex_with_minmax_indefinite in grid layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee

(* Test context for nodes *)
module MeasureFunction = struct
  type t = Fixed of float Toffee.Geometry.size | Text of string
  [@@warning "-37"]
end

(* Test measure function *)
let measure_function ~known_dimensions ~available_space _node_id node_context
    _style =
  match node_context with
  | Some (MeasureFunction.Fixed size) -> size
  | Some (MeasureFunction.Text text) ->
      (* Ahem font simulation: each character is 10x10 *)
      let h_width = 10.0 in
      let h_height = 10.0 in
      let zws = "\u{200b}" in
      let lines = String.split_on_char (String.get zws 0) text in
      let min_line_length =
        List.fold_left max 0 (List.map String.length lines)
      in
      let max_line_length =
        List.fold_left ( + ) 0 (List.map String.length lines)
      in

      let inline_size =
        match known_dimensions.Toffee.Geometry.width with
        | Some w -> w
        | None ->
            (match available_space.Toffee.Geometry.width with
            | Toffee.Style.Available_space.Min_content ->
                float_of_int min_line_length *. h_width
            | Toffee.Style.Available_space.Max_content ->
                float_of_int max_line_length *. h_width
            | Toffee.Style.Available_space.Definite inline_size ->
                Float.min inline_size (float_of_int max_line_length *. h_width))
            |> Float.max (float_of_int min_line_length *. h_width)
      in

      let block_size =
        match known_dimensions.Toffee.Geometry.height with
        | Some h -> h
        | None ->
            let inline_line_length =
              int_of_float (Float.floor (inline_size /. h_width))
            in
            let rec count_lines current_line_length line_count = function
              | [] -> line_count
              | line :: rest ->
                  let line_len = String.length line in
                  if current_line_length + line_len > inline_line_length then
                    if current_line_length > 0 then
                      count_lines line_len (line_count + 1) rest
                    else count_lines line_len line_count rest
                  else
                    count_lines (current_line_length + line_len) line_count rest
            in
            float_of_int (count_lines 0 1 lines) *. h_height
      in
      { width = inline_size; height = block_size }
  | None -> { width = 0.0; height = 0.0 }

let test_grid_span_13_most_non_flex_with_minmax_indefinite_border_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = Toffee.create () in

  (* Create nodes *)
  let node =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Grid;
        grid_template_columns =
          [
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Min_content;
                max = Toffee.Style.Grid.Min_content;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Max_content;
                max = Toffee.Style.Grid.Max_content;
              };
            Toffee.Style.Grid.Single
              { min = Toffee.Style.Grid.Auto; max = Toffee.Style.Grid.Auto };
            Toffee.Style.Grid.Single
              { min = Toffee.Style.Grid.Auto; max = Toffee.Style.Grid.Auto };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 10.0;
                max = Toffee.Style.Grid.Length 10.0;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Percent 0.2;
                max = Toffee.Style.Grid.Percent 0.2;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 2.0;
                max = Toffee.Style.Grid.Auto;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 2.0;
                max = Toffee.Style.Grid.Length 4.0;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 2.0;
                max = Toffee.Style.Grid.Min_content;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 2.0;
                max = Toffee.Style.Grid.Max_content;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Min_content;
                max = Toffee.Style.Grid.Max_content;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Min_content;
                max = Toffee.Style.Grid.Auto;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Max_content;
                max = Toffee.Style.Grid.Auto;
              };
          ];
        grid_template_rows =
          [
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 40.0;
                max = Toffee.Style.Grid.Length 40.0;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 40.0;
                max = Toffee.Style.Grid.Length 40.0;
              };
          ];
      }
  in
  let node0 = Toffee.new_leaf tree Toffee.Style.default in
  let _ =
    Toffee.set_node_context tree node0
      (MeasureFunction.Text "HHHHHHHHHHHHHHHHâ€‹HHHHHHHHHHHHHHHH")
    |> Result.get_ok
  in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 = Toffee.new_leaf tree Toffee.Style.default in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in
  let node2 = Toffee.new_leaf tree Toffee.Style.default in
  let _ = Toffee.add_child tree node node2 |> Result.get_ok in
  let node3 = Toffee.new_leaf tree Toffee.Style.default in
  let _ = Toffee.add_child tree node node3 |> Result.get_ok in
  let node4 = Toffee.new_leaf tree Toffee.Style.default in
  let _ = Toffee.add_child tree node node4 |> Result.get_ok in
  let node5 = Toffee.new_leaf tree Toffee.Style.default in
  let _ = Toffee.add_child tree node node5 |> Result.get_ok in
  let node6 = Toffee.new_leaf tree Toffee.Style.default in
  let _ = Toffee.add_child tree node node6 |> Result.get_ok in
  let node7 = Toffee.new_leaf tree Toffee.Style.default in
  let _ = Toffee.add_child tree node node7 |> Result.get_ok in
  let node8 = Toffee.new_leaf tree Toffee.Style.default in
  let _ = Toffee.add_child tree node node8 |> Result.get_ok in
  let node9 = Toffee.new_leaf tree Toffee.Style.default in
  let _ = Toffee.add_child tree node node9 |> Result.get_ok in
  let node10 = Toffee.new_leaf tree Toffee.Style.default in
  let _ = Toffee.add_child tree node node10 |> Result.get_ok in
  let node11 = Toffee.new_leaf tree Toffee.Style.default in
  let _ = Toffee.add_child tree node node11 |> Result.get_ok in
  let node12 = Toffee.new_leaf tree Toffee.Style.default in
  let _ = Toffee.add_child tree node node12 |> Result.get_ok in
  let node13 = Toffee.new_leaf tree Toffee.Style.default in
  let _ = Toffee.add_child tree node node13 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    Toffee.compute_layout_with_measure tree node
      {
        width = Toffee.Style.Available_space.Max_content;
        height = Toffee.Style.Available_space.Max_content;
      }
      measure_function
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 322.0 layout.size.width;
  assert_eq ~msg:"height of node" 80.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 322.0 layout.size.width;
  assert_eq ~msg:"height of node0" 40.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 11.0 layout.size.width;
  assert_eq ~msg:"height of node1" 40.0 layout.size.height;
  assert_eq ~msg:"x of node1" 0.0 layout.location.x;
  assert_eq ~msg:"y of node1" 40.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 91.0 layout.size.width;
  assert_eq ~msg:"height of node2" 40.0 layout.size.height;
  assert_eq ~msg:"x of node2" 11.0 layout.location.x;
  assert_eq ~msg:"y of node2" 40.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 11.0 layout.size.width;
  assert_eq ~msg:"height of node3" 40.0 layout.size.height;
  assert_eq ~msg:"x of node3" 102.0 layout.location.x;
  assert_eq ~msg:"y of node3" 40.0 layout.location.y;
  let layout = Toffee.layout tree node4 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node4" 11.0 layout.size.width;
  assert_eq ~msg:"height of node4" 40.0 layout.size.height;
  assert_eq ~msg:"x of node4" 113.0 layout.location.x;
  assert_eq ~msg:"y of node4" 40.0 layout.location.y;
  let layout = Toffee.layout tree node5 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node5" 10.0 layout.size.width;
  assert_eq ~msg:"height of node5" 40.0 layout.size.height;
  assert_eq ~msg:"x of node5" 124.0 layout.location.x;
  assert_eq ~msg:"y of node5" 40.0 layout.location.y;
  let layout = Toffee.layout tree node6 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node6" 65.0 layout.size.width;
  assert_eq ~msg:"height of node6" 40.0 layout.size.height;
  assert_eq ~msg:"x of node6" 134.0 layout.location.x;
  assert_eq ~msg:"y of node6" 40.0 layout.location.y;
  let layout = Toffee.layout tree node7 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node7" 2.0 layout.size.width;
  assert_eq ~msg:"height of node7" 40.0 layout.size.height;
  assert_eq ~msg:"x of node7" 199.0 layout.location.x;
  assert_eq ~msg:"y of node7" 40.0 layout.location.y;
  let layout = Toffee.layout tree node8 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node8" 4.0 layout.size.width;
  assert_eq ~msg:"height of node8" 40.0 layout.size.height;
  assert_eq ~msg:"x of node8" 201.0 layout.location.x;
  assert_eq ~msg:"y of node8" 40.0 layout.location.y;
  let layout = Toffee.layout tree node9 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node9" 2.0 layout.size.width;
  assert_eq ~msg:"height of node9" 40.0 layout.size.height;
  assert_eq ~msg:"x of node9" 205.0 layout.location.x;
  assert_eq ~msg:"y of node9" 40.0 layout.location.y;
  let layout = Toffee.layout tree node10 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node10" 2.0 layout.size.width;
  assert_eq ~msg:"height of node10" 40.0 layout.size.height;
  assert_eq ~msg:"x of node10" 207.0 layout.location.x;
  assert_eq ~msg:"y of node10" 40.0 layout.location.y;
  let layout = Toffee.layout tree node11 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node11" 11.0 layout.size.width;
  assert_eq ~msg:"height of node11" 40.0 layout.size.height;
  assert_eq ~msg:"x of node11" 209.0 layout.location.x;
  assert_eq ~msg:"y of node11" 40.0 layout.location.y;
  let layout = Toffee.layout tree node12 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node12" 11.0 layout.size.width;
  assert_eq ~msg:"height of node12" 40.0 layout.size.height;
  assert_eq ~msg:"x of node12" 220.0 layout.location.x;
  assert_eq ~msg:"y of node12" 40.0 layout.location.y;
  let layout = Toffee.layout tree node13 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node13" 91.0 layout.size.width;
  assert_eq ~msg:"height of node13" 40.0 layout.size.height;
  assert_eq ~msg:"x of node13" 231.0 layout.location.x;
  assert_eq ~msg:"y of node13" 40.0 layout.location.y;
  ()

let test_grid_span_13_most_non_flex_with_minmax_indefinite_content_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = Toffee.create () in

  (* Create nodes *)
  let node =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Grid;
        grid_template_columns =
          [
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Min_content;
                max = Toffee.Style.Grid.Min_content;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Max_content;
                max = Toffee.Style.Grid.Max_content;
              };
            Toffee.Style.Grid.Single
              { min = Toffee.Style.Grid.Auto; max = Toffee.Style.Grid.Auto };
            Toffee.Style.Grid.Single
              { min = Toffee.Style.Grid.Auto; max = Toffee.Style.Grid.Auto };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 10.0;
                max = Toffee.Style.Grid.Length 10.0;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Percent 0.2;
                max = Toffee.Style.Grid.Percent 0.2;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 2.0;
                max = Toffee.Style.Grid.Auto;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 2.0;
                max = Toffee.Style.Grid.Length 4.0;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 2.0;
                max = Toffee.Style.Grid.Min_content;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 2.0;
                max = Toffee.Style.Grid.Max_content;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Min_content;
                max = Toffee.Style.Grid.Max_content;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Min_content;
                max = Toffee.Style.Grid.Auto;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Max_content;
                max = Toffee.Style.Grid.Auto;
              };
          ];
        grid_template_rows =
          [
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 40.0;
                max = Toffee.Style.Grid.Length 40.0;
              };
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 40.0;
                max = Toffee.Style.Grid.Length 40.0;
              };
          ];
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let node0 =
    Toffee.new_leaf tree
      { Toffee.Style.default with box_sizing = Toffee.Style.Content_box }
  in
  let _ =
    Toffee.set_node_context tree node0
      (MeasureFunction.Text "HHHHHHHHHHHHHHHHâ€‹HHHHHHHHHHHHHHHH")
    |> Result.get_ok
  in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 =
    Toffee.new_leaf tree
      { Toffee.Style.default with box_sizing = Toffee.Style.Content_box }
  in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in
  let node2 =
    Toffee.new_leaf tree
      { Toffee.Style.default with box_sizing = Toffee.Style.Content_box }
  in
  let _ = Toffee.add_child tree node node2 |> Result.get_ok in
  let node3 =
    Toffee.new_leaf tree
      { Toffee.Style.default with box_sizing = Toffee.Style.Content_box }
  in
  let _ = Toffee.add_child tree node node3 |> Result.get_ok in
  let node4 =
    Toffee.new_leaf tree
      { Toffee.Style.default with box_sizing = Toffee.Style.Content_box }
  in
  let _ = Toffee.add_child tree node node4 |> Result.get_ok in
  let node5 =
    Toffee.new_leaf tree
      { Toffee.Style.default with box_sizing = Toffee.Style.Content_box }
  in
  let _ = Toffee.add_child tree node node5 |> Result.get_ok in
  let node6 =
    Toffee.new_leaf tree
      { Toffee.Style.default with box_sizing = Toffee.Style.Content_box }
  in
  let _ = Toffee.add_child tree node node6 |> Result.get_ok in
  let node7 =
    Toffee.new_leaf tree
      { Toffee.Style.default with box_sizing = Toffee.Style.Content_box }
  in
  let _ = Toffee.add_child tree node node7 |> Result.get_ok in
  let node8 =
    Toffee.new_leaf tree
      { Toffee.Style.default with box_sizing = Toffee.Style.Content_box }
  in
  let _ = Toffee.add_child tree node node8 |> Result.get_ok in
  let node9 =
    Toffee.new_leaf tree
      { Toffee.Style.default with box_sizing = Toffee.Style.Content_box }
  in
  let _ = Toffee.add_child tree node node9 |> Result.get_ok in
  let node10 =
    Toffee.new_leaf tree
      { Toffee.Style.default with box_sizing = Toffee.Style.Content_box }
  in
  let _ = Toffee.add_child tree node node10 |> Result.get_ok in
  let node11 =
    Toffee.new_leaf tree
      { Toffee.Style.default with box_sizing = Toffee.Style.Content_box }
  in
  let _ = Toffee.add_child tree node node11 |> Result.get_ok in
  let node12 =
    Toffee.new_leaf tree
      { Toffee.Style.default with box_sizing = Toffee.Style.Content_box }
  in
  let _ = Toffee.add_child tree node node12 |> Result.get_ok in
  let node13 =
    Toffee.new_leaf tree
      { Toffee.Style.default with box_sizing = Toffee.Style.Content_box }
  in
  let _ = Toffee.add_child tree node node13 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    Toffee.compute_layout_with_measure tree node
      {
        width = Toffee.Style.Available_space.Max_content;
        height = Toffee.Style.Available_space.Max_content;
      }
      measure_function
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 322.0 layout.size.width;
  assert_eq ~msg:"height of node" 80.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 322.0 layout.size.width;
  assert_eq ~msg:"height of node0" 40.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 11.0 layout.size.width;
  assert_eq ~msg:"height of node1" 40.0 layout.size.height;
  assert_eq ~msg:"x of node1" 0.0 layout.location.x;
  assert_eq ~msg:"y of node1" 40.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 91.0 layout.size.width;
  assert_eq ~msg:"height of node2" 40.0 layout.size.height;
  assert_eq ~msg:"x of node2" 11.0 layout.location.x;
  assert_eq ~msg:"y of node2" 40.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 11.0 layout.size.width;
  assert_eq ~msg:"height of node3" 40.0 layout.size.height;
  assert_eq ~msg:"x of node3" 102.0 layout.location.x;
  assert_eq ~msg:"y of node3" 40.0 layout.location.y;
  let layout = Toffee.layout tree node4 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node4" 11.0 layout.size.width;
  assert_eq ~msg:"height of node4" 40.0 layout.size.height;
  assert_eq ~msg:"x of node4" 113.0 layout.location.x;
  assert_eq ~msg:"y of node4" 40.0 layout.location.y;
  let layout = Toffee.layout tree node5 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node5" 10.0 layout.size.width;
  assert_eq ~msg:"height of node5" 40.0 layout.size.height;
  assert_eq ~msg:"x of node5" 124.0 layout.location.x;
  assert_eq ~msg:"y of node5" 40.0 layout.location.y;
  let layout = Toffee.layout tree node6 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node6" 65.0 layout.size.width;
  assert_eq ~msg:"height of node6" 40.0 layout.size.height;
  assert_eq ~msg:"x of node6" 134.0 layout.location.x;
  assert_eq ~msg:"y of node6" 40.0 layout.location.y;
  let layout = Toffee.layout tree node7 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node7" 2.0 layout.size.width;
  assert_eq ~msg:"height of node7" 40.0 layout.size.height;
  assert_eq ~msg:"x of node7" 199.0 layout.location.x;
  assert_eq ~msg:"y of node7" 40.0 layout.location.y;
  let layout = Toffee.layout tree node8 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node8" 4.0 layout.size.width;
  assert_eq ~msg:"height of node8" 40.0 layout.size.height;
  assert_eq ~msg:"x of node8" 201.0 layout.location.x;
  assert_eq ~msg:"y of node8" 40.0 layout.location.y;
  let layout = Toffee.layout tree node9 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node9" 2.0 layout.size.width;
  assert_eq ~msg:"height of node9" 40.0 layout.size.height;
  assert_eq ~msg:"x of node9" 205.0 layout.location.x;
  assert_eq ~msg:"y of node9" 40.0 layout.location.y;
  let layout = Toffee.layout tree node10 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node10" 2.0 layout.size.width;
  assert_eq ~msg:"height of node10" 40.0 layout.size.height;
  assert_eq ~msg:"x of node10" 207.0 layout.location.x;
  assert_eq ~msg:"y of node10" 40.0 layout.location.y;
  let layout = Toffee.layout tree node11 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node11" 11.0 layout.size.width;
  assert_eq ~msg:"height of node11" 40.0 layout.size.height;
  assert_eq ~msg:"x of node11" 209.0 layout.location.x;
  assert_eq ~msg:"y of node11" 40.0 layout.location.y;
  let layout = Toffee.layout tree node12 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node12" 11.0 layout.size.width;
  assert_eq ~msg:"height of node12" 40.0 layout.size.height;
  assert_eq ~msg:"x of node12" 220.0 layout.location.x;
  assert_eq ~msg:"y of node12" 40.0 layout.location.y;
  let layout = Toffee.layout tree node13 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node13" 91.0 layout.size.width;
  assert_eq ~msg:"height of node13" 40.0 layout.size.height;
  assert_eq ~msg:"x of node13" 231.0 layout.location.x;
  assert_eq ~msg:"y of node13" 40.0 layout.location.y;
  ()

(* Test runner *)
let () =
  let open Alcotest in
  run "Toffee grid_span_13_most_non_flex_with_minmax_indefinite Test"
    [
      ( "grid_grid_span_13_most_non_flex_with_minmax_indefinite",
        [
          test_case
            "grid_span_13_most_non_flex_with_minmax_indefinite (border-box)"
            `Quick
            test_grid_span_13_most_non_flex_with_minmax_indefinite_border_box;
          test_case
            "grid_span_13_most_non_flex_with_minmax_indefinite (content-box)"
            `Quick
            test_grid_span_13_most_non_flex_with_minmax_indefinite_content_box;
        ] );
    ]
