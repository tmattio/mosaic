(* Generated test for block_margin_y_collapse_through_with_absolute_child in block layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee

(* Test context for nodes *)
module MeasureFunction = struct
  type t =
    | Fixed of float Toffee.Geometry.size
    | Text of string
    | Text_vertical of string
  [@@warning "-37"]
end

(* Test measure function *)
let measure_function ~known_dimensions ~available_space _node_id node_context
    _style =
  match node_context with
  | Some (MeasureFunction.Fixed size) -> size
  | Some (MeasureFunction.Text text) ->
      (* Ahem font simulation: each character is 10x10 *)
      let h_width = 10.0 in
      let h_height = 10.0 in
      let zws = "\u{200b}" in
      let lines = String.split_on_char (String.get zws 0) text in
      let min_line_length =
        List.fold_left max 0 (List.map String.length lines)
      in
      let max_line_length =
        List.fold_left ( + ) 0 (List.map String.length lines)
      in

      let inline_size =
        match known_dimensions.Toffee.Geometry.width with
        | Some w -> w
        | None ->
            (match available_space.Toffee.Geometry.width with
            | Toffee.Style.Available_space.Min_content ->
                float_of_int min_line_length *. h_width
            | Toffee.Style.Available_space.Max_content ->
                float_of_int max_line_length *. h_width
            | Toffee.Style.Available_space.Definite inline_size ->
                Float.min inline_size (float_of_int max_line_length *. h_width))
            |> Float.max (float_of_int min_line_length *. h_width)
      in

      let block_size =
        match known_dimensions.Toffee.Geometry.height with
        | Some h -> h
        | None ->
            let inline_line_length =
              int_of_float (Float.floor (inline_size /. h_width))
            in
            let rec count_lines current_line_length line_count = function
              | [] -> line_count
              | line :: rest ->
                  let line_len = String.length line in
                  if current_line_length + line_len > inline_line_length then
                    if current_line_length > 0 then
                      count_lines line_len (line_count + 1) rest
                    else count_lines line_len line_count rest
                  else
                    count_lines (current_line_length + line_len) line_count rest
            in
            float_of_int (count_lines 0 1 lines) *. h_height
      in
      { width = inline_size; height = block_size }
  | Some (MeasureFunction.Text_vertical text) ->
      (* Vertical text: height is based on text length, width is based on available space *)
      let h_width = 10.0 in
      let h_height = 10.0 in
      let text_length = String.length text in

      let block_size = float_of_int text_length *. h_height in
      let inline_size =
        match known_dimensions.Toffee.Geometry.width with
        | Some w -> w
        | None -> (
            match available_space.Toffee.Geometry.width with
            | Toffee.Style.Available_space.Min_content -> h_width
            | Toffee.Style.Available_space.Max_content -> h_width
            | Toffee.Style.Available_space.Definite w -> w)
      in
      { width = inline_size; height = block_size }
  | None -> { width = 0.0; height = 0.0 }

let test_block_margin_y_collapse_through_with_absolute_child_border_box
    measure_function () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = Toffee.create () in

  (* Create nodes *)
  let node =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        size =
          {
            width = Toffee.Style.Dimension.length 50.0;
            height = Toffee.Style.Dimension.auto;
          };
      }
  in
  let node0 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        size =
          {
            width = Toffee.Style.Dimension.auto;
            height = Toffee.Style.Dimension.length 10.0;
          };
        margin =
          {
            left = Toffee.Style.Length_percentage_auto.Auto;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Auto;
            bottom = Toffee.Style.Length_percentage_auto.Length 10.0;
          };
      }
  in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        margin =
          {
            left = Toffee.Style.Length_percentage_auto.Auto;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Length 10.0;
            bottom = Toffee.Style.Length_percentage_auto.Length 10.0;
          };
      }
  in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in
  let node2 =
    Toffee.new_leaf tree
      { Toffee.Style.default with position = Toffee.Style.Absolute }
  in
  let _ =
    Toffee.set_node_context tree node2 (MeasureFunction.Text "HH")
    |> Result.get_ok
  in
  let _ = Toffee.add_child tree node1 node2 |> Result.get_ok in
  let node3 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        size =
          {
            width = Toffee.Style.Dimension.auto;
            height = Toffee.Style.Dimension.length 10.0;
          };
        margin =
          {
            left = Toffee.Style.Length_percentage_auto.Auto;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Length 10.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
      }
  in
  let _ = Toffee.add_child tree node node3 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    Toffee.compute_layout_with_measure tree node
      {
        width = Toffee.Style.Available_space.Max_content;
        height = Toffee.Style.Available_space.Max_content;
      }
      measure_function
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 50.0 layout.size.width;
  assert_eq ~msg:"height of node" 30.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 50.0 layout.size.width;
  assert_eq ~msg:"height of node0" 10.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 50.0 layout.size.width;
  assert_eq ~msg:"height of node1" 0.0 layout.size.height;
  assert_eq ~msg:"x of node1" 0.0 layout.location.x;
  assert_eq ~msg:"y of node1" 20.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 20.0 layout.size.width;
  assert_eq ~msg:"height of node2" 10.0 layout.size.height;
  assert_eq ~msg:"x of node2" 0.0 layout.location.x;
  assert_eq ~msg:"y of node2" 0.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 50.0 layout.size.width;
  assert_eq ~msg:"height of node3" 10.0 layout.size.height;
  assert_eq ~msg:"x of node3" 0.0 layout.location.x;
  assert_eq ~msg:"y of node3" 20.0 layout.location.y;
  ()

let test_block_margin_y_collapse_through_with_absolute_child_content_box
    measure_function () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = Toffee.create () in

  (* Create nodes *)
  let node =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        size =
          {
            width = Toffee.Style.Dimension.length 50.0;
            height = Toffee.Style.Dimension.auto;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let node0 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        size =
          {
            width = Toffee.Style.Dimension.auto;
            height = Toffee.Style.Dimension.length 10.0;
          };
        margin =
          {
            left = Toffee.Style.Length_percentage_auto.Auto;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Auto;
            bottom = Toffee.Style.Length_percentage_auto.Length 10.0;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        margin =
          {
            left = Toffee.Style.Length_percentage_auto.Auto;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Length 10.0;
            bottom = Toffee.Style.Length_percentage_auto.Length 10.0;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in
  let node2 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        position = Toffee.Style.Absolute;
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ =
    Toffee.set_node_context tree node2 (MeasureFunction.Text "HH")
    |> Result.get_ok
  in
  let _ = Toffee.add_child tree node1 node2 |> Result.get_ok in
  let node3 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        size =
          {
            width = Toffee.Style.Dimension.auto;
            height = Toffee.Style.Dimension.length 10.0;
          };
        margin =
          {
            left = Toffee.Style.Length_percentage_auto.Auto;
            right = Toffee.Style.Length_percentage_auto.Auto;
            top = Toffee.Style.Length_percentage_auto.Length 10.0;
            bottom = Toffee.Style.Length_percentage_auto.Auto;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node node3 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    Toffee.compute_layout_with_measure tree node
      {
        width = Toffee.Style.Available_space.Max_content;
        height = Toffee.Style.Available_space.Max_content;
      }
      measure_function
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 50.0 layout.size.width;
  assert_eq ~msg:"height of node" 30.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 50.0 layout.size.width;
  assert_eq ~msg:"height of node0" 10.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 50.0 layout.size.width;
  assert_eq ~msg:"height of node1" 0.0 layout.size.height;
  assert_eq ~msg:"x of node1" 0.0 layout.location.x;
  assert_eq ~msg:"y of node1" 20.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 20.0 layout.size.width;
  assert_eq ~msg:"height of node2" 10.0 layout.size.height;
  assert_eq ~msg:"x of node2" 0.0 layout.location.x;
  assert_eq ~msg:"y of node2" 0.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 50.0 layout.size.width;
  assert_eq ~msg:"height of node3" 10.0 layout.size.height;
  assert_eq ~msg:"x of node3" 0.0 layout.location.x;
  assert_eq ~msg:"y of node3" 20.0 layout.location.y;
  ()

(* Export tests for aggregation *)
let tests =
  let open Alcotest in
  [
    test_case "margin_y_collapse_through_with_absolute_child (border-box)"
      `Quick (fun () ->
        test_block_margin_y_collapse_through_with_absolute_child_border_box
          measure_function ());
    test_case "margin_y_collapse_through_with_absolute_child (content-box)"
      `Quick (fun () ->
        test_block_margin_y_collapse_through_with_absolute_child_content_box
          measure_function ());
  ]
