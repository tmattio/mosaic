(* Generated test for block_item_max_width in block layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee

let test_block_item_max_width_border_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = Toffee.create () in

  (* Create nodes *)
  let node =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        size =
          {
            width = Toffee.Style.Dimension.length 200.0;
            height = Toffee.Style.Dimension.length 200.0;
          };
      }
  in
  let node0 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        size =
          {
            width = Toffee.Style.Dimension.auto;
            height = Toffee.Style.Dimension.length 50.0;
          };
        max_size =
          {
            width = Toffee.Style.Dimension.length 100.0;
            height = Toffee.Style.Dimension.auto;
          };
      }
  in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        size =
          {
            width = Toffee.Style.Dimension.auto;
            height = Toffee.Style.Dimension.length 50.0;
          };
        max_size =
          {
            width = Toffee.Style.Dimension.length 300.0;
            height = Toffee.Style.Dimension.auto;
          };
      }
  in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    Toffee.compute_layout tree node
      {
        width = Toffee.Style.Available_space.Max_content;
        height = Toffee.Style.Available_space.Max_content;
      }
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 200.0 layout.size.width;
  assert_eq ~msg:"height of node" 200.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 100.0 layout.size.width;
  assert_eq ~msg:"height of node0" 50.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 200.0 layout.size.width;
  assert_eq ~msg:"height of node1" 50.0 layout.size.height;
  assert_eq ~msg:"x of node1" 0.0 layout.location.x;
  assert_eq ~msg:"y of node1" 50.0 layout.location.y;
  ()

let test_block_item_max_width_content_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = Toffee.create () in

  (* Create nodes *)
  let node =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        size =
          {
            width = Toffee.Style.Dimension.length 200.0;
            height = Toffee.Style.Dimension.length 200.0;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let node0 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        size =
          {
            width = Toffee.Style.Dimension.auto;
            height = Toffee.Style.Dimension.length 50.0;
          };
        max_size =
          {
            width = Toffee.Style.Dimension.length 100.0;
            height = Toffee.Style.Dimension.auto;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        size =
          {
            width = Toffee.Style.Dimension.auto;
            height = Toffee.Style.Dimension.length 50.0;
          };
        max_size =
          {
            width = Toffee.Style.Dimension.length 300.0;
            height = Toffee.Style.Dimension.auto;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    Toffee.compute_layout tree node
      {
        width = Toffee.Style.Available_space.Max_content;
        height = Toffee.Style.Available_space.Max_content;
      }
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 200.0 layout.size.width;
  assert_eq ~msg:"height of node" 200.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 100.0 layout.size.width;
  assert_eq ~msg:"height of node0" 50.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 200.0 layout.size.width;
  assert_eq ~msg:"height of node1" 50.0 layout.size.height;
  assert_eq ~msg:"x of node1" 0.0 layout.location.x;
  assert_eq ~msg:"y of node1" 50.0 layout.location.y;
  ()

(* Test runner *)
let () =
  let open Alcotest in
  run "Toffee block_item_max_width Test"
    [
      ( "block_block_item_max_width",
        [
          test_case "block_item_max_width (border-box)" `Quick
            test_block_item_max_width_border_box;
          test_case "block_item_max_width (content-box)" `Quick
            test_block_item_max_width_content_box;
        ] );
    ]
