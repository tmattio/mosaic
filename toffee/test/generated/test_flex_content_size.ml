(* Generated test for content_size in flex layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee

(* Test context for nodes *)
module MeasureFunction = struct
  type t =
    | Fixed of float Geometry.size
    | Text of string
    | Text_vertical of string
  [@@warning "-37"]
end

(* Test measure function *)
let measure_function known_dimensions available_space _node_id node_context
    _style =
  match node_context with
  | Some (MeasureFunction.Fixed size) -> size
  | Some (MeasureFunction.Text text) ->
      (* Ahem font simulation: each character is 10x10 *)
      let h_width = 10.0 in
      let h_height = 10.0 in
      let zws = "\u{200b}" in
      let lines = String.split_on_char (String.get zws 0) text in
      let min_line_length =
        List.fold_left max 0 (List.map String.length lines)
      in
      let max_line_length =
        List.fold_left ( + ) 0 (List.map String.length lines)
      in

      let inline_size =
        match known_dimensions.Geometry.Size.width with
        | Some w -> w
        | None ->
            (match available_space.Geometry.Size.width with
            | Available_space.Min_content ->
                float_of_int min_line_length *. h_width
            | Available_space.Max_content ->
                float_of_int max_line_length *. h_width
            | Available_space.Definite inline_size ->
                Float.min inline_size (float_of_int max_line_length *. h_width))
            |> Float.max (float_of_int min_line_length *. h_width)
      in

      let block_size =
        match known_dimensions.Geometry.Size.height with
        | Some h -> h
        | None ->
            let inline_line_length =
              int_of_float (Float.floor (inline_size /. h_width))
            in
            let rec count_lines current_line_length line_count = function
              | [] -> line_count
              | line :: rest ->
                  let line_len = String.length line in
                  if current_line_length + line_len > inline_line_length then
                    if current_line_length > 0 then
                      count_lines line_len (line_count + 1) rest
                    else count_lines line_len line_count rest
                  else
                    count_lines (current_line_length + line_len) line_count rest
            in
            float_of_int (count_lines 0 1 lines) *. h_height
      in
      { width = inline_size; height = block_size }
  | Some (MeasureFunction.Text_vertical text) ->
      (* Vertical text: height is based on text length, width is based on available space *)
      let h_width = 10.0 in
      let h_height = 10.0 in
      let text_length = String.length text in

      let block_size = float_of_int text_length *. h_height in
      let inline_size =
        match known_dimensions.Geometry.Size.width with
        | Some w -> w
        | None -> (
            match available_space.Geometry.Size.width with
            | Available_space.Min_content -> h_width
            | Available_space.Max_content -> h_width
            | Available_space.Definite w -> w)
      in
      { width = inline_size; height = block_size }
  | None -> { width = 0.0; height = 0.0 }

let test_flex_content_size_border_box measure_function () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = new_tree () in

  (* Create nodes *)
  let node =
    new_leaf tree
      (Style.make ~display:Style.Display.Flex
         ~flex_direction:Style.Flex_direction.Column
         ~size:
           {
             width = Style.Dimension.length 100.0;
             height = Style.Dimension.length 100.0;
           }
         ~overflow:{ x = Style.Overflow.Visible; y = Style.Overflow.Scroll }
         ())
    |> Result.get_ok
  in
  let node0 =
    new_leaf tree
      (Style.make
         ~size:
           {
             width = Style.Dimension.auto;
             height = Style.Dimension.length 30.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node0 |> Result.get_ok in
  let node1 =
    new_leaf tree
      (Style.make ~position:Style.Position.Absolute ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.percent 1.0;
             height = Style.Dimension.length 20.0;
           }
         ~inset:
           {
             left = Style.Length_percentage_auto.auto;
             right = Style.Length_percentage_auto.auto;
             top = Style.Length_percentage_auto.length (-10.0);
             bottom = Style.Length_percentage_auto.auto;
           }
         ())
    |> Result.get_ok
  in
  let _ =
    set_node_context tree node1 (Some (MeasureFunction.Text "HHHH​HHHH"))
    |> Result.get_ok
  in
  let _ = add_child tree node0 node1 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    compute_layout_with_measure tree node
      {
        width = Available_space.Max_content;
        height = Available_space.Max_content;
      }
      measure_function
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout_result = layout tree node |> Result.get_ok in
  assert_eq ~msg:"width of node" 100.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node" 100.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node" 0.0 (Layout.location layout_result).y;
  (* Content size assertions for scroll container *)
  (* Note: In Toffee, scroll_width and scroll_height are functions, not fields *)
  assert_eq ~msg:"scroll_width of node" 0.0 (Layout.scroll_width layout_result);
  assert_eq ~msg:"scroll_height of node" 0.0
    (Layout.scroll_height layout_result);
  let layout_result = layout tree node0 |> Result.get_ok in
  assert_eq ~msg:"width of node0" 100.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node0" 30.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node0" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node0" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node1 |> Result.get_ok in
  assert_eq ~msg:"width of node1" 100.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node1" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node1" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node1" (-10.0) (Layout.location layout_result).y;
  ()

let test_flex_content_size_content_box measure_function () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = new_tree () in

  (* Create nodes *)
  let node =
    new_leaf tree
      (Style.make ~display:Style.Display.Flex
         ~flex_direction:Style.Flex_direction.Column
         ~size:
           {
             width = Style.Dimension.length 100.0;
             height = Style.Dimension.length 100.0;
           }
         ~overflow:{ x = Style.Overflow.Visible; y = Style.Overflow.Scroll }
         ())
    |> Result.get_ok
  in
  let node0 =
    new_leaf tree
      (Style.make
         ~size:
           {
             width = Style.Dimension.auto;
             height = Style.Dimension.length 30.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node0 |> Result.get_ok in
  let node1 =
    new_leaf tree
      (Style.make ~position:Style.Position.Absolute ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.percent 1.0;
             height = Style.Dimension.length 20.0;
           }
         ~inset:
           {
             left = Style.Length_percentage_auto.auto;
             right = Style.Length_percentage_auto.auto;
             top = Style.Length_percentage_auto.length (-10.0);
             bottom = Style.Length_percentage_auto.auto;
           }
         ())
    |> Result.get_ok
  in
  let _ =
    set_node_context tree node1 (Some (MeasureFunction.Text "HHHH​HHHH"))
    |> Result.get_ok
  in
  let _ = add_child tree node0 node1 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    compute_layout_with_measure tree node
      {
        width = Available_space.Max_content;
        height = Available_space.Max_content;
      }
      measure_function
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout_result = layout tree node |> Result.get_ok in
  assert_eq ~msg:"width of node" 100.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node" 100.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node" 0.0 (Layout.location layout_result).y;
  (* Content size assertions for scroll container *)
  (* Note: In Toffee, scroll_width and scroll_height are functions, not fields *)
  assert_eq ~msg:"scroll_width of node" 0.0 (Layout.scroll_width layout_result);
  assert_eq ~msg:"scroll_height of node" 0.0
    (Layout.scroll_height layout_result);
  let layout_result = layout tree node0 |> Result.get_ok in
  assert_eq ~msg:"width of node0" 100.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node0" 30.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node0" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node0" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node1 |> Result.get_ok in
  assert_eq ~msg:"width of node1" 100.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node1" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node1" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node1" (-10.0) (Layout.location layout_result).y;
  ()

(* Export tests for aggregation *)
let tests =
  let open Alcotest in
  [
    test_case "content_size (border-box)" `Quick (fun () ->
        test_flex_content_size_border_box measure_function ());
    test_case "content_size (content-box)" `Quick (fun () ->
        test_flex_content_size_content_box measure_function ());
  ]
