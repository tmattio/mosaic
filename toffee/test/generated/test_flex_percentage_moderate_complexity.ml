(* Generated test for percentage_moderate_complexity in flex layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee

let test_flex_percentage_moderate_complexity_border_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.1) msg expected actual
  in

  let tree = new_tree () in
  let tree = disable_rounding tree in

  (* Create nodes *)
  let node =
    new_leaf tree
      (Style.make ~display:Style.Display.Flex
         ~flex_direction:Style.Flex_direction.Column
         ~size:
           {
             width = Style.Dimension.length 200.0;
             height = Style.Dimension.auto;
           }
         ~padding:
           {
             left = Style.Length_percentage.length 3.0;
             right = Style.Length_percentage.length 3.0;
             top = Style.Length_percentage.length 3.0;
             bottom = Style.Length_percentage.length 3.0;
           }
         ())
    |> Result.get_ok
  in
  let node0 =
    new_leaf tree
      (Style.make ~display:Style.Display.Flex
         ~flex_direction:Style.Flex_direction.Column
         ~size:
           {
             width = Style.Dimension.percent 0.5;
             height = Style.Dimension.auto;
           }
         ~margin:
           {
             left = Style.Length_percentage_auto.length 5.0;
             right = Style.Length_percentage_auto.length 5.0;
             top = Style.Length_percentage_auto.length 5.0;
             bottom = Style.Length_percentage_auto.length 5.0;
           }
         ~padding:
           {
             left = Style.Length_percentage.percent 0.03;
             right = Style.Length_percentage.percent 0.03;
             top = Style.Length_percentage.percent 0.03;
             bottom = Style.Length_percentage.percent 0.03;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node0 |> Result.get_ok in
  let node1 =
    new_leaf tree
      (Style.make
         ~size:
           {
             width = Style.Dimension.percent 0.45;
             height = Style.Dimension.auto;
           }
         ~margin:
           {
             left = Style.Length_percentage_auto.percent 0.05;
             right = Style.Length_percentage_auto.percent 0.05;
             top = Style.Length_percentage_auto.percent 0.05;
             bottom = Style.Length_percentage_auto.percent 0.05;
           }
         ~padding:
           {
             left = Style.Length_percentage.length 3.0;
             right = Style.Length_percentage.length 3.0;
             top = Style.Length_percentage.length 3.0;
             bottom = Style.Length_percentage.length 3.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node0 node1 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    compute_layout tree node
      {
        width = Available_space.Max_content;
        height = Available_space.Max_content;
      }
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout_result = layout tree node |> Result.get_ok in
  assert_eq ~msg:"width of node" 200.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node" 42.15625 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node0 |> Result.get_ok in
  assert_eq ~msg:"width of node0" 97.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node0" 26.15625 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node0" 8.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node0" 8.0 (Layout.location layout_result).y;
  let layout_result = layout tree node1 |> Result.get_ok in
  assert_eq ~msg:"width of node1" 38.40625 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node1" 6.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node1" 10.078125 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node1" 10.078125 (Layout.location layout_result).y;
  ()

let test_flex_percentage_moderate_complexity_content_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.1) msg expected actual
  in

  let tree = new_tree () in
  let tree = disable_rounding tree in

  (* Create nodes *)
  let node =
    new_leaf tree
      (Style.make ~display:Style.Display.Flex
         ~flex_direction:Style.Flex_direction.Column
         ~size:
           {
             width = Style.Dimension.length 200.0;
             height = Style.Dimension.auto;
           }
         ~padding:
           {
             left = Style.Length_percentage.length 3.0;
             right = Style.Length_percentage.length 3.0;
             top = Style.Length_percentage.length 3.0;
             bottom = Style.Length_percentage.length 3.0;
           }
         ())
    |> Result.get_ok
  in
  let node0 =
    new_leaf tree
      (Style.make ~display:Style.Display.Flex
         ~flex_direction:Style.Flex_direction.Column
         ~size:
           {
             width = Style.Dimension.percent 0.5;
             height = Style.Dimension.auto;
           }
         ~margin:
           {
             left = Style.Length_percentage_auto.length 5.0;
             right = Style.Length_percentage_auto.length 5.0;
             top = Style.Length_percentage_auto.length 5.0;
             bottom = Style.Length_percentage_auto.length 5.0;
           }
         ~padding:
           {
             left = Style.Length_percentage.percent 0.03;
             right = Style.Length_percentage.percent 0.03;
             top = Style.Length_percentage.percent 0.03;
             bottom = Style.Length_percentage.percent 0.03;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node0 |> Result.get_ok in
  let node1 =
    new_leaf tree
      (Style.make
         ~size:
           {
             width = Style.Dimension.percent 0.45;
             height = Style.Dimension.auto;
           }
         ~margin:
           {
             left = Style.Length_percentage_auto.percent 0.05;
             right = Style.Length_percentage_auto.percent 0.05;
             top = Style.Length_percentage_auto.percent 0.05;
             bottom = Style.Length_percentage_auto.percent 0.05;
           }
         ~padding:
           {
             left = Style.Length_percentage.length 3.0;
             right = Style.Length_percentage.length 3.0;
             top = Style.Length_percentage.length 3.0;
             bottom = Style.Length_percentage.length 3.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node0 node1 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    compute_layout tree node
      {
        width = Available_space.Max_content;
        height = Available_space.Max_content;
      }
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout_result = layout tree node |> Result.get_ok in
  assert_eq ~msg:"width of node" 206.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node" 44.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node0 |> Result.get_ok in
  assert_eq ~msg:"width of node0" 112.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node0" 28.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node0" 8.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node0" 8.0 (Layout.location layout_result).y;
  let layout_result = layout tree node1 |> Result.get_ok in
  assert_eq ~msg:"width of node1" 51.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node1" 6.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node1" 11.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node1" 11.0 (Layout.location layout_result).y;
  ()

(* Export tests for aggregation *)
let tests =
  let open Alcotest in
  [
    test_case "percentage_moderate_complexity (border-box)" `Quick
      test_flex_percentage_moderate_complexity_border_box;
    test_case "percentage_moderate_complexity (content-box)" `Quick
      test_flex_percentage_moderate_complexity_content_box;
  ]
