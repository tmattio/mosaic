
(* Generated test for block_absolute_child_with_margin_y in block layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee




let test_block_absolute_child_with_margin_y_border_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in
  
  let tree = Toffee.create () in
  
  
  (* Create nodes *)
  let node = Toffee.new_leaf tree ({ Toffee.Style.default with display = Toffee.Style.Block; size = { width = Toffee.Style.Dimension.length 20.0; height = Toffee.Style.Dimension.length 37.0 } }) in
  let node0 = Toffee.new_leaf tree ({ Toffee.Style.default with position = Toffee.Style.Absolute; size = { width = Toffee.Style.Dimension.length 9.0; height = Toffee.Style.Dimension.length 9.0 }; margin = { left = Toffee.Style.Length_percentage_auto.Length (0.0); right = Toffee.Style.Length_percentage_auto.Length (0.0); top = Toffee.Style.Length_percentage_auto.Length (7.0); bottom = Toffee.Style.Length_percentage_auto.Length (0.0) } }) in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 = Toffee.new_leaf tree ({ Toffee.Style.default with position = Toffee.Style.Absolute; size = { width = Toffee.Style.Dimension.length 9.0; height = Toffee.Style.Dimension.length 9.0 }; margin = { left = Toffee.Style.Length_percentage_auto.Length (0.0); right = Toffee.Style.Length_percentage_auto.Length (0.0); top = Toffee.Style.Length_percentage_auto.Length (0.0); bottom = Toffee.Style.Length_percentage_auto.Length (7.0) } }) in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in
  let node2 = Toffee.new_leaf tree ({ Toffee.Style.default with position = Toffee.Style.Absolute; size = { width = Toffee.Style.Dimension.length 9.0; height = Toffee.Style.Dimension.length 9.0 }; margin = { left = Toffee.Style.Length_percentage_auto.Length (0.0); right = Toffee.Style.Length_percentage_auto.Length (0.0); top = Toffee.Style.Length_percentage_auto.Length (10.0); bottom = Toffee.Style.Length_percentage_auto.Length (5.0) } }) in
  let _ = Toffee.add_child tree node node2 |> Result.get_ok in
  
  (* Compute layout *)
  let _ = Toffee.compute_layout tree node {
    width = Toffee.Style.Available_space.Max_content;
    height = Toffee.Style.Available_space.Max_content;
  } |> Result.get_ok in
  
  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";
  
  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 20.0 layout.size.width;
  assert_eq ~msg:"height of node" 37.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 9.0 layout.size.width;
  assert_eq ~msg:"height of node0" 9.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 7.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 9.0 layout.size.width;
  assert_eq ~msg:"height of node1" 9.0 layout.size.height;
  assert_eq ~msg:"x of node1" 0.0 layout.location.x;
  assert_eq ~msg:"y of node1" 0.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 9.0 layout.size.width;
  assert_eq ~msg:"height of node2" 9.0 layout.size.height;
  assert_eq ~msg:"x of node2" 0.0 layout.location.x;
  assert_eq ~msg:"y of node2" 10.0 layout.location.y;
  ()



let test_block_absolute_child_with_margin_y_content_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in
  
  let tree = Toffee.create () in
  
  
  (* Create nodes *)
  let node = Toffee.new_leaf tree ({ Toffee.Style.default with display = Toffee.Style.Block; size = { width = Toffee.Style.Dimension.length 20.0; height = Toffee.Style.Dimension.length 37.0 }; box_sizing = Toffee.Style.Content_box }) in
  let node0 = Toffee.new_leaf tree ({ Toffee.Style.default with position = Toffee.Style.Absolute; size = { width = Toffee.Style.Dimension.length 9.0; height = Toffee.Style.Dimension.length 9.0 }; margin = { left = Toffee.Style.Length_percentage_auto.Length (0.0); right = Toffee.Style.Length_percentage_auto.Length (0.0); top = Toffee.Style.Length_percentage_auto.Length (7.0); bottom = Toffee.Style.Length_percentage_auto.Length (0.0) }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 = Toffee.new_leaf tree ({ Toffee.Style.default with position = Toffee.Style.Absolute; size = { width = Toffee.Style.Dimension.length 9.0; height = Toffee.Style.Dimension.length 9.0 }; margin = { left = Toffee.Style.Length_percentage_auto.Length (0.0); right = Toffee.Style.Length_percentage_auto.Length (0.0); top = Toffee.Style.Length_percentage_auto.Length (0.0); bottom = Toffee.Style.Length_percentage_auto.Length (7.0) }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in
  let node2 = Toffee.new_leaf tree ({ Toffee.Style.default with position = Toffee.Style.Absolute; size = { width = Toffee.Style.Dimension.length 9.0; height = Toffee.Style.Dimension.length 9.0 }; margin = { left = Toffee.Style.Length_percentage_auto.Length (0.0); right = Toffee.Style.Length_percentage_auto.Length (0.0); top = Toffee.Style.Length_percentage_auto.Length (10.0); bottom = Toffee.Style.Length_percentage_auto.Length (5.0) }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node2 |> Result.get_ok in
  
  (* Compute layout *)
  let _ = Toffee.compute_layout tree node {
    width = Toffee.Style.Available_space.Max_content;
    height = Toffee.Style.Available_space.Max_content;
  } |> Result.get_ok in
  
  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";
  
  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 20.0 layout.size.width;
  assert_eq ~msg:"height of node" 37.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 9.0 layout.size.width;
  assert_eq ~msg:"height of node0" 9.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 7.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 9.0 layout.size.width;
  assert_eq ~msg:"height of node1" 9.0 layout.size.height;
  assert_eq ~msg:"x of node1" 0.0 layout.location.x;
  assert_eq ~msg:"y of node1" 0.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 9.0 layout.size.width;
  assert_eq ~msg:"height of node2" 9.0 layout.size.height;
  assert_eq ~msg:"x of node2" 0.0 layout.location.x;
  assert_eq ~msg:"y of node2" 10.0 layout.location.y;
  ()


(* Test runner *)
let () =
  let open Alcotest in
  run "Toffee block_absolute_child_with_margin_y Test" [
    "block_block_absolute_child_with_margin_y", [
      test_case "block_absolute_child_with_margin_y (border-box)" `Quick test_block_absolute_child_with_margin_y_border_box;
      test_case "block_absolute_child_with_margin_y (content-box)" `Quick test_block_absolute_child_with_margin_y_content_box;
    ];
  ]
