
(* Generated test for grid_span_2_max_content_auto_indefinite in grid layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee

(* Test context for nodes *)
module MeasureFunction = struct
  type t = 
    | Fixed of float Toffee.Geometry.size
    | Text of string
  [@@warning "-37"]
end


(* Test measure function *)
let measure_function ~known_dimensions:_ ~available_space:_ _node_id node_context _style =
  match node_context with
  | Some (MeasureFunction.Fixed size) -> size
  | Some (MeasureFunction.Text _) -> { width = 100.0; height = 20.0 }  (* Placeholder *)
  | None -> { width = 0.0; height = 0.0 }




let test_grid_span_2_max_content_auto_indefinite_border_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in
  
  let tree = Toffee.create () in
  
  
  (* Create nodes *)
  let node = Toffee.new_leaf tree ({ Toffee.Style.default with display = Toffee.Style.Grid; grid_template_columns = [Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Max_content; max = Toffee.Style.Grid.Max_content }; Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Auto; max = Toffee.Style.Grid.Auto }]; grid_template_rows = [Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Length (40.0); max = Toffee.Style.Grid.Length (40.0) }] }) in
  let node0 = Toffee.new_leaf tree (Toffee.Style.default) in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 = Toffee.new_leaf tree (Toffee.Style.default) in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in
  let node2 = Toffee.new_leaf tree (Toffee.Style.default) in
  let _ = Toffee.set_node_context tree node2 (MeasureFunction.Fixed {width = 90.0; height = 10.0}) |> Result.get_ok in
  let _ = Toffee.add_child tree node node2 |> Result.get_ok in
  
  (* Compute layout *)
  let _ = Toffee.compute_layout_with_measure tree node {
    width = Toffee.Style.Available_space.Max_content;
    height = Toffee.Style.Available_space.Max_content;
  } measure_function |> Result.get_ok in
  
  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";
  
  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 80.0 layout.size.width;
  assert_eq ~msg:"height of node" 40.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 60.0 layout.size.width;
  assert_eq ~msg:"height of node0" 40.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 20.0 layout.size.width;
  assert_eq ~msg:"height of node1" 40.0 layout.size.height;
  assert_eq ~msg:"x of node1" 60.0 layout.location.x;
  assert_eq ~msg:"y of node1" 0.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 80.0 layout.size.width;
  assert_eq ~msg:"height of node2" 40.0 layout.size.height;
  assert_eq ~msg:"x of node2" 0.0 layout.location.x;
  assert_eq ~msg:"y of node2" 0.0 layout.location.y;
  ()



let test_grid_span_2_max_content_auto_indefinite_content_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in
  
  let tree = Toffee.create () in
  
  
  (* Create nodes *)
  let node = Toffee.new_leaf tree ({ Toffee.Style.default with display = Toffee.Style.Grid; grid_template_columns = [Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Max_content; max = Toffee.Style.Grid.Max_content }; Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Auto; max = Toffee.Style.Grid.Auto }]; grid_template_rows = [Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Length (40.0); max = Toffee.Style.Grid.Length (40.0) }]; box_sizing = Toffee.Style.Content_box }) in
  let node0 = Toffee.new_leaf tree ({ Toffee.Style.default with box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 = Toffee.new_leaf tree ({ Toffee.Style.default with box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in
  let node2 = Toffee.new_leaf tree ({ Toffee.Style.default with box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.set_node_context tree node2 (MeasureFunction.Fixed {width = 90.0; height = 10.0}) |> Result.get_ok in
  let _ = Toffee.add_child tree node node2 |> Result.get_ok in
  
  (* Compute layout *)
  let _ = Toffee.compute_layout_with_measure tree node {
    width = Toffee.Style.Available_space.Max_content;
    height = Toffee.Style.Available_space.Max_content;
  } measure_function |> Result.get_ok in
  
  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";
  
  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 80.0 layout.size.width;
  assert_eq ~msg:"height of node" 40.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 60.0 layout.size.width;
  assert_eq ~msg:"height of node0" 40.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 20.0 layout.size.width;
  assert_eq ~msg:"height of node1" 40.0 layout.size.height;
  assert_eq ~msg:"x of node1" 60.0 layout.location.x;
  assert_eq ~msg:"y of node1" 0.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 80.0 layout.size.width;
  assert_eq ~msg:"height of node2" 40.0 layout.size.height;
  assert_eq ~msg:"x of node2" 0.0 layout.location.x;
  assert_eq ~msg:"y of node2" 0.0 layout.location.y;
  ()


(* Test runner *)
let () =
  let open Alcotest in
  run "Toffee grid_span_2_max_content_auto_indefinite Test" [
    "grid_grid_span_2_max_content_auto_indefinite", [
      test_case "grid_span_2_max_content_auto_indefinite (border-box)" `Quick test_grid_span_2_max_content_auto_indefinite_border_box;
      test_case "grid_span_2_max_content_auto_indefinite (content-box)" `Quick test_grid_span_2_max_content_auto_indefinite_content_box;
    ];
  ]
