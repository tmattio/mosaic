(* Generated test for grid_min_content_flex_single_item in grid layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee

(* Test context for nodes *)
module MeasureFunction = struct
  type t =
    | Fixed of float Geometry.size
    | Text of string
    | Text_vertical of string
  [@@warning "-37"]
end

(* Test measure function *)
let measure_function known_dimensions available_space _node_id node_context
    _style =
  match node_context with
  | Some (MeasureFunction.Fixed size) -> size
  | Some (MeasureFunction.Text text) ->
      (* Ahem font simulation: each character is 10x10 *)
      let h_width = 10.0 in
      let h_height = 10.0 in
      let lines =
        (* Split on zero-width space - OCaml's split_on_char works on bytes, 
           so we need to split on the UTF-8 sequence *)
        let split_on_string sep str =
          let sep_len = String.length sep in
          let rec aux acc start =
            try
              let pos = String.index_from str start (String.get sep 0) in
              if
                pos + sep_len <= String.length str
                && String.sub str pos sep_len = sep
              then
                aux (String.sub str start (pos - start) :: acc) (pos + sep_len)
              else aux acc (pos + 1)
            with Not_found ->
              List.rev (String.sub str start (String.length str - start) :: acc)
          in
          aux [] 0
        in
        split_on_string "\u{200b}" text
      in
      let min_line_length =
        List.fold_left max 0 (List.map String.length lines)
      in
      let max_line_length =
        List.fold_left ( + ) 0 (List.map String.length lines)
      in

      let inline_size =
        match known_dimensions.Geometry.Size.width with
        | Some w -> w
        | None ->
            (match available_space.Geometry.Size.width with
            | Available_space.Min_content ->
                float_of_int min_line_length *. h_width
            | Available_space.Max_content ->
                float_of_int max_line_length *. h_width
            | Available_space.Definite inline_size ->
                Float.min inline_size (float_of_int max_line_length *. h_width))
            |> Float.max (float_of_int min_line_length *. h_width)
      in

      let block_size =
        match known_dimensions.Geometry.Size.height with
        | Some h -> h
        | None ->
            let inline_line_length =
              int_of_float (Float.floor (inline_size /. h_width))
            in
            (* Match Taffy's exact line counting logic *)
            let line_count = ref 1 in
            let current_line_length = ref 0 in
            List.iter
              (fun line ->
                let line_len = String.length line in
                if !current_line_length + line_len > inline_line_length then (
                  if !current_line_length > 0 then incr line_count;
                  current_line_length := line_len)
                else current_line_length := !current_line_length + line_len)
              lines;
            float_of_int !line_count *. h_height
      in
      { width = inline_size; height = block_size }
  | Some (MeasureFunction.Text_vertical text) ->
      (* Vertical text: height is based on text length, width is based on available space *)
      let h_width = 10.0 in
      let h_height = 10.0 in
      let text_length = String.length text in

      let block_size = float_of_int text_length *. h_height in
      let inline_size =
        match known_dimensions.Geometry.Size.width with
        | Some w -> w
        | None -> (
            match available_space.Geometry.Size.width with
            | Available_space.Min_content -> h_width
            | Available_space.Max_content -> h_width
            | Available_space.Definite w -> w)
      in
      { width = inline_size; height = block_size }
  | None -> { width = 0.0; height = 0.0 }

let test_grid_min_content_flex_single_item_border_box measure_function () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = new_tree () in

  (* Create nodes *)
  let node1 = new_leaf tree Style.default |> Result.get_ok in
  let node2 =
    new_leaf tree
      (Style.make
         ~min_size:
           {
             width = Style.Dimension.length 10.0;
             height = Style.Dimension.auto;
           }
         ())
    |> Result.get_ok
  in
  let node3 = new_leaf tree Style.default |> Result.get_ok in
  let node4 = new_leaf tree Style.default |> Result.get_ok in
  let node5 =
    new_leaf tree
      (Style.make
         ~grid_column:
           {
             start = Style.Grid.Placement.span 2;
             end_ = Style.Grid.Placement.auto;
           }
         ())
    |> Result.get_ok
  in
  let _ =
    set_node_context tree node5 (Some (MeasureFunction.Text "HHâ€‹HH"))
    |> Result.get_ok
  in
  let node6 = new_leaf tree Style.default |> Result.get_ok in
  let node7 = new_leaf tree Style.default |> Result.get_ok in
  let node8 = new_leaf tree Style.default |> Result.get_ok in
  let node0 =
    new_with_children tree
      (Style.make ~display:Style.Display.Grid
         ~grid_template_columns:
           [
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.length 40.0);
             Style.Grid.Template_component.single
               Style.Grid.Track_sizing_function.min_content;
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.fr 1.0);
           ]
         ~grid_template_rows:
           [
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.length 40.0);
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.length 40.0);
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.length 40.0);
           ]
         ())
      [| node1; node2; node3; node4; node5; node6; node7; node8 |]
    |> Result.get_ok
  in

  (* Compute layout *)
  let _ =
    compute_layout_with_measure tree node0
      {
        width = Available_space.Max_content;
        height = Available_space.Max_content;
      }
      measure_function
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  print_tree tree node0;
  Printf.printf "\n";

  (* Verify layout *)
  let layout_result = layout tree node1 |> Result.get_ok in
  assert_eq ~msg:"width of node1" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node1" 40.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node1" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node1" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node2 |> Result.get_ok in
  assert_eq ~msg:"width of node2" 10.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node2" 40.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node2" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node2" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node3 |> Result.get_ok in
  assert_eq ~msg:"width of node3" 30.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node3" 40.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node3" 50.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node3" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node4 |> Result.get_ok in
  assert_eq ~msg:"width of node4" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node4" 40.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node4" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node4" 40.0 (Layout.location layout_result).y;
  let layout_result = layout tree node5 |> Result.get_ok in
  assert_eq ~msg:"width of node5" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node5" 40.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node5" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node5" 40.0 (Layout.location layout_result).y;
  let layout_result = layout tree node6 |> Result.get_ok in
  assert_eq ~msg:"width of node6" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node6" 40.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node6" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node6" 80.0 (Layout.location layout_result).y;
  let layout_result = layout tree node7 |> Result.get_ok in
  assert_eq ~msg:"width of node7" 10.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node7" 40.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node7" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node7" 80.0 (Layout.location layout_result).y;
  let layout_result = layout tree node8 |> Result.get_ok in
  assert_eq ~msg:"width of node8" 30.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node8" 40.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node8" 50.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node8" 80.0 (Layout.location layout_result).y;
  let layout_result = layout tree node0 |> Result.get_ok in
  assert_eq ~msg:"width of node0" 80.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node0" 120.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node0" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node0" 0.0 (Layout.location layout_result).y;
  ()

let test_grid_min_content_flex_single_item_content_box measure_function () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = new_tree () in

  (* Create nodes *)
  let node1 =
    new_leaf tree (Style.make ~box_sizing:Style.Box_sizing.Content_box ())
    |> Result.get_ok
  in
  let node2 =
    new_leaf tree
      (Style.make
         ~min_size:
           {
             width = Style.Dimension.length 10.0;
             height = Style.Dimension.auto;
           }
         ~box_sizing:Style.Box_sizing.Content_box ())
    |> Result.get_ok
  in
  let node3 =
    new_leaf tree (Style.make ~box_sizing:Style.Box_sizing.Content_box ())
    |> Result.get_ok
  in
  let node4 =
    new_leaf tree (Style.make ~box_sizing:Style.Box_sizing.Content_box ())
    |> Result.get_ok
  in
  let node5 =
    new_leaf tree
      (Style.make
         ~grid_column:
           {
             start = Style.Grid.Placement.span 2;
             end_ = Style.Grid.Placement.auto;
           }
         ~box_sizing:Style.Box_sizing.Content_box ())
    |> Result.get_ok
  in
  let _ =
    set_node_context tree node5 (Some (MeasureFunction.Text "HHâ€‹HH"))
    |> Result.get_ok
  in
  let node6 =
    new_leaf tree (Style.make ~box_sizing:Style.Box_sizing.Content_box ())
    |> Result.get_ok
  in
  let node7 =
    new_leaf tree (Style.make ~box_sizing:Style.Box_sizing.Content_box ())
    |> Result.get_ok
  in
  let node8 =
    new_leaf tree (Style.make ~box_sizing:Style.Box_sizing.Content_box ())
    |> Result.get_ok
  in
  let node0 =
    new_with_children tree
      (Style.make ~display:Style.Display.Grid
         ~grid_template_columns:
           [
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.length 40.0);
             Style.Grid.Template_component.single
               Style.Grid.Track_sizing_function.min_content;
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.fr 1.0);
           ]
         ~grid_template_rows:
           [
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.length 40.0);
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.length 40.0);
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.length 40.0);
           ]
         ~box_sizing:Style.Box_sizing.Content_box ())
      [| node1; node2; node3; node4; node5; node6; node7; node8 |]
    |> Result.get_ok
  in

  (* Compute layout *)
  let _ =
    compute_layout_with_measure tree node0
      {
        width = Available_space.Max_content;
        height = Available_space.Max_content;
      }
      measure_function
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  print_tree tree node0;
  Printf.printf "\n";

  (* Verify layout *)
  let layout_result = layout tree node1 |> Result.get_ok in
  assert_eq ~msg:"width of node1" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node1" 40.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node1" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node1" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node2 |> Result.get_ok in
  assert_eq ~msg:"width of node2" 10.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node2" 40.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node2" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node2" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node3 |> Result.get_ok in
  assert_eq ~msg:"width of node3" 30.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node3" 40.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node3" 50.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node3" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node4 |> Result.get_ok in
  assert_eq ~msg:"width of node4" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node4" 40.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node4" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node4" 40.0 (Layout.location layout_result).y;
  let layout_result = layout tree node5 |> Result.get_ok in
  assert_eq ~msg:"width of node5" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node5" 40.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node5" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node5" 40.0 (Layout.location layout_result).y;
  let layout_result = layout tree node6 |> Result.get_ok in
  assert_eq ~msg:"width of node6" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node6" 40.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node6" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node6" 80.0 (Layout.location layout_result).y;
  let layout_result = layout tree node7 |> Result.get_ok in
  assert_eq ~msg:"width of node7" 10.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node7" 40.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node7" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node7" 80.0 (Layout.location layout_result).y;
  let layout_result = layout tree node8 |> Result.get_ok in
  assert_eq ~msg:"width of node8" 30.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node8" 40.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node8" 50.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node8" 80.0 (Layout.location layout_result).y;
  let layout_result = layout tree node0 |> Result.get_ok in
  assert_eq ~msg:"width of node0" 80.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node0" 120.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node0" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node0" 0.0 (Layout.location layout_result).y;
  ()

(* Export tests for aggregation *)
let tests =
  let open Alcotest in
  [
    test_case "min_content_flex_single_item (border-box)" `Quick (fun () ->
        test_grid_min_content_flex_single_item_border_box measure_function ());
    test_case "min_content_flex_single_item (content-box)" `Quick (fun () ->
        test_grid_min_content_flex_single_item_content_box measure_function ());
  ]
