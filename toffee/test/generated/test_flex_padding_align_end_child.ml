(* Generated test for padding_align_end_child in flex layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee

let test_flex_padding_align_end_child_border_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = Toffee.create () in

  (* Create nodes *)
  let node =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        align_items = Some Toffee.Style.Alignment.Flex_end;
        justify_content = Some Toffee.Style.Alignment.Flex_end;
        size =
          {
            width = Toffee.Style.Dimension.length 200.0;
            height = Toffee.Style.Dimension.length 200.0;
          };
      }
  in
  let node0 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        size =
          {
            width = Toffee.Style.Dimension.length 100.0;
            height = Toffee.Style.Dimension.length 100.0;
          };
        padding =
          {
            left = Toffee.Style.Length_percentage.Length 20.0;
            right = Toffee.Style.Length_percentage.Length 20.0;
            top = Toffee.Style.Length_percentage.Length 20.0;
            bottom = Toffee.Style.Length_percentage.Length 20.0;
          };
      }
  in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    Toffee.compute_layout tree node
      {
        width = Toffee.Style.Available_space.Max_content;
        height = Toffee.Style.Available_space.Max_content;
      }
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 200.0 layout.size.width;
  assert_eq ~msg:"height of node" 200.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 100.0 layout.size.width;
  assert_eq ~msg:"height of node0" 100.0 layout.size.height;
  assert_eq ~msg:"x of node0" 100.0 layout.location.x;
  assert_eq ~msg:"y of node0" 100.0 layout.location.y;
  ()

let test_flex_padding_align_end_child_content_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = Toffee.create () in

  (* Create nodes *)
  let node =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        align_items = Some Toffee.Style.Alignment.Flex_end;
        justify_content = Some Toffee.Style.Alignment.Flex_end;
        size =
          {
            width = Toffee.Style.Dimension.length 200.0;
            height = Toffee.Style.Dimension.length 200.0;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let node0 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        size =
          {
            width = Toffee.Style.Dimension.length 100.0;
            height = Toffee.Style.Dimension.length 100.0;
          };
        padding =
          {
            left = Toffee.Style.Length_percentage.Length 20.0;
            right = Toffee.Style.Length_percentage.Length 20.0;
            top = Toffee.Style.Length_percentage.Length 20.0;
            bottom = Toffee.Style.Length_percentage.Length 20.0;
          };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    Toffee.compute_layout tree node
      {
        width = Toffee.Style.Available_space.Max_content;
        height = Toffee.Style.Available_space.Max_content;
      }
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 200.0 layout.size.width;
  assert_eq ~msg:"height of node" 200.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 140.0 layout.size.width;
  assert_eq ~msg:"height of node0" 140.0 layout.size.height;
  assert_eq ~msg:"x of node0" 60.0 layout.location.x;
  assert_eq ~msg:"y of node0" 60.0 layout.location.y;
  ()

(* Export tests for aggregation *)
let tests =
  let open Alcotest in
  [
    test_case "padding_align_end_child (border-box)" `Quick
      test_flex_padding_align_end_child_border_box;
    test_case "padding_align_end_child (content-box)" `Quick
      test_flex_padding_align_end_child_content_box;
  ]
