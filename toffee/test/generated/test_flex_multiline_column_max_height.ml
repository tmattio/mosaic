
(* Generated test for multiline_column_max_height in flex layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee




let test_multiline_column_max_height_border_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in
  
  let tree = Toffee.create () in
  
  
  (* Create nodes *)
  let node = Toffee.new_leaf tree ({ Toffee.Style.default with display = Toffee.Style.Flex; flex_direction = Toffee.Style.Flex.Column; flex_wrap = Toffee.Style.Flex.Wrap; max_size = { width = Toffee.Style.Dimension.auto; height = Toffee.Style.Dimension.length 200.0 } }) in
  let node0 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in
  let node2 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node2 |> Result.get_ok in
  let node3 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node3 |> Result.get_ok in
  let node4 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node4 |> Result.get_ok in
  let node5 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node5 |> Result.get_ok in
  let node6 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node6 |> Result.get_ok in
  let node7 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node7 |> Result.get_ok in
  let node8 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node8 |> Result.get_ok in
  let node9 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node9 |> Result.get_ok in
  let node10 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node10 |> Result.get_ok in
  let node11 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node11 |> Result.get_ok in
  let node12 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node12 |> Result.get_ok in
  let node13 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node13 |> Result.get_ok in
  let node14 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node14 |> Result.get_ok in
  let node15 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node15 |> Result.get_ok in
  let node16 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node16 |> Result.get_ok in
  let node17 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node17 |> Result.get_ok in
  let node18 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node18 |> Result.get_ok in
  let node19 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node node19 |> Result.get_ok in
  
  (* Compute layout *)
  let _ = Toffee.compute_layout tree node {
    width = Toffee.Style.Available_space.Max_content;
    height = Toffee.Style.Available_space.Max_content;
  } |> Result.get_ok in
  
  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";
  
  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 80.0 layout.size.width;
  assert_eq ~msg:"height of node" 200.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 40.0 layout.size.width;
  assert_eq ~msg:"height of node0" 20.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 40.0 layout.size.width;
  assert_eq ~msg:"height of node1" 20.0 layout.size.height;
  assert_eq ~msg:"x of node1" 0.0 layout.location.x;
  assert_eq ~msg:"y of node1" 20.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 40.0 layout.size.width;
  assert_eq ~msg:"height of node2" 20.0 layout.size.height;
  assert_eq ~msg:"x of node2" 0.0 layout.location.x;
  assert_eq ~msg:"y of node2" 40.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 40.0 layout.size.width;
  assert_eq ~msg:"height of node3" 20.0 layout.size.height;
  assert_eq ~msg:"x of node3" 0.0 layout.location.x;
  assert_eq ~msg:"y of node3" 60.0 layout.location.y;
  let layout = Toffee.layout tree node4 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node4" 40.0 layout.size.width;
  assert_eq ~msg:"height of node4" 20.0 layout.size.height;
  assert_eq ~msg:"x of node4" 0.0 layout.location.x;
  assert_eq ~msg:"y of node4" 80.0 layout.location.y;
  let layout = Toffee.layout tree node5 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node5" 40.0 layout.size.width;
  assert_eq ~msg:"height of node5" 20.0 layout.size.height;
  assert_eq ~msg:"x of node5" 0.0 layout.location.x;
  assert_eq ~msg:"y of node5" 100.0 layout.location.y;
  let layout = Toffee.layout tree node6 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node6" 40.0 layout.size.width;
  assert_eq ~msg:"height of node6" 20.0 layout.size.height;
  assert_eq ~msg:"x of node6" 0.0 layout.location.x;
  assert_eq ~msg:"y of node6" 120.0 layout.location.y;
  let layout = Toffee.layout tree node7 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node7" 40.0 layout.size.width;
  assert_eq ~msg:"height of node7" 20.0 layout.size.height;
  assert_eq ~msg:"x of node7" 0.0 layout.location.x;
  assert_eq ~msg:"y of node7" 140.0 layout.location.y;
  let layout = Toffee.layout tree node8 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node8" 40.0 layout.size.width;
  assert_eq ~msg:"height of node8" 20.0 layout.size.height;
  assert_eq ~msg:"x of node8" 0.0 layout.location.x;
  assert_eq ~msg:"y of node8" 160.0 layout.location.y;
  let layout = Toffee.layout tree node9 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node9" 40.0 layout.size.width;
  assert_eq ~msg:"height of node9" 20.0 layout.size.height;
  assert_eq ~msg:"x of node9" 0.0 layout.location.x;
  assert_eq ~msg:"y of node9" 180.0 layout.location.y;
  let layout = Toffee.layout tree node10 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node10" 40.0 layout.size.width;
  assert_eq ~msg:"height of node10" 20.0 layout.size.height;
  assert_eq ~msg:"x of node10" 40.0 layout.location.x;
  assert_eq ~msg:"y of node10" 0.0 layout.location.y;
  let layout = Toffee.layout tree node11 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node11" 40.0 layout.size.width;
  assert_eq ~msg:"height of node11" 20.0 layout.size.height;
  assert_eq ~msg:"x of node11" 40.0 layout.location.x;
  assert_eq ~msg:"y of node11" 20.0 layout.location.y;
  let layout = Toffee.layout tree node12 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node12" 40.0 layout.size.width;
  assert_eq ~msg:"height of node12" 20.0 layout.size.height;
  assert_eq ~msg:"x of node12" 40.0 layout.location.x;
  assert_eq ~msg:"y of node12" 40.0 layout.location.y;
  let layout = Toffee.layout tree node13 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node13" 40.0 layout.size.width;
  assert_eq ~msg:"height of node13" 20.0 layout.size.height;
  assert_eq ~msg:"x of node13" 40.0 layout.location.x;
  assert_eq ~msg:"y of node13" 60.0 layout.location.y;
  let layout = Toffee.layout tree node14 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node14" 40.0 layout.size.width;
  assert_eq ~msg:"height of node14" 20.0 layout.size.height;
  assert_eq ~msg:"x of node14" 40.0 layout.location.x;
  assert_eq ~msg:"y of node14" 80.0 layout.location.y;
  let layout = Toffee.layout tree node15 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node15" 40.0 layout.size.width;
  assert_eq ~msg:"height of node15" 20.0 layout.size.height;
  assert_eq ~msg:"x of node15" 40.0 layout.location.x;
  assert_eq ~msg:"y of node15" 100.0 layout.location.y;
  let layout = Toffee.layout tree node16 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node16" 40.0 layout.size.width;
  assert_eq ~msg:"height of node16" 20.0 layout.size.height;
  assert_eq ~msg:"x of node16" 40.0 layout.location.x;
  assert_eq ~msg:"y of node16" 120.0 layout.location.y;
  let layout = Toffee.layout tree node17 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node17" 40.0 layout.size.width;
  assert_eq ~msg:"height of node17" 20.0 layout.size.height;
  assert_eq ~msg:"x of node17" 40.0 layout.location.x;
  assert_eq ~msg:"y of node17" 140.0 layout.location.y;
  let layout = Toffee.layout tree node18 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node18" 40.0 layout.size.width;
  assert_eq ~msg:"height of node18" 20.0 layout.size.height;
  assert_eq ~msg:"x of node18" 40.0 layout.location.x;
  assert_eq ~msg:"y of node18" 160.0 layout.location.y;
  let layout = Toffee.layout tree node19 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node19" 40.0 layout.size.width;
  assert_eq ~msg:"height of node19" 20.0 layout.size.height;
  assert_eq ~msg:"x of node19" 40.0 layout.location.x;
  assert_eq ~msg:"y of node19" 180.0 layout.location.y;
  ()



let test_multiline_column_max_height_content_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in
  
  let tree = Toffee.create () in
  
  
  (* Create nodes *)
  let node = Toffee.new_leaf tree ({ Toffee.Style.default with display = Toffee.Style.Flex; flex_direction = Toffee.Style.Flex.Column; flex_wrap = Toffee.Style.Flex.Wrap; max_size = { width = Toffee.Style.Dimension.auto; height = Toffee.Style.Dimension.length 200.0 }; box_sizing = Toffee.Style.Content_box }) in
  let node0 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in
  let node2 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node2 |> Result.get_ok in
  let node3 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node3 |> Result.get_ok in
  let node4 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node4 |> Result.get_ok in
  let node5 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node5 |> Result.get_ok in
  let node6 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node6 |> Result.get_ok in
  let node7 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node7 |> Result.get_ok in
  let node8 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node8 |> Result.get_ok in
  let node9 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node9 |> Result.get_ok in
  let node10 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node10 |> Result.get_ok in
  let node11 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node11 |> Result.get_ok in
  let node12 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node12 |> Result.get_ok in
  let node13 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node13 |> Result.get_ok in
  let node14 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node14 |> Result.get_ok in
  let node15 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node15 |> Result.get_ok in
  let node16 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node16 |> Result.get_ok in
  let node17 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node17 |> Result.get_ok in
  let node18 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node18 |> Result.get_ok in
  let node19 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_shrink = 0.0; size = { width = Toffee.Style.Dimension.length 40.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node19 |> Result.get_ok in
  
  (* Compute layout *)
  let _ = Toffee.compute_layout tree node {
    width = Toffee.Style.Available_space.Max_content;
    height = Toffee.Style.Available_space.Max_content;
  } |> Result.get_ok in
  
  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";
  
  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 80.0 layout.size.width;
  assert_eq ~msg:"height of node" 200.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 40.0 layout.size.width;
  assert_eq ~msg:"height of node0" 20.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 40.0 layout.size.width;
  assert_eq ~msg:"height of node1" 20.0 layout.size.height;
  assert_eq ~msg:"x of node1" 0.0 layout.location.x;
  assert_eq ~msg:"y of node1" 20.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 40.0 layout.size.width;
  assert_eq ~msg:"height of node2" 20.0 layout.size.height;
  assert_eq ~msg:"x of node2" 0.0 layout.location.x;
  assert_eq ~msg:"y of node2" 40.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 40.0 layout.size.width;
  assert_eq ~msg:"height of node3" 20.0 layout.size.height;
  assert_eq ~msg:"x of node3" 0.0 layout.location.x;
  assert_eq ~msg:"y of node3" 60.0 layout.location.y;
  let layout = Toffee.layout tree node4 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node4" 40.0 layout.size.width;
  assert_eq ~msg:"height of node4" 20.0 layout.size.height;
  assert_eq ~msg:"x of node4" 0.0 layout.location.x;
  assert_eq ~msg:"y of node4" 80.0 layout.location.y;
  let layout = Toffee.layout tree node5 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node5" 40.0 layout.size.width;
  assert_eq ~msg:"height of node5" 20.0 layout.size.height;
  assert_eq ~msg:"x of node5" 0.0 layout.location.x;
  assert_eq ~msg:"y of node5" 100.0 layout.location.y;
  let layout = Toffee.layout tree node6 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node6" 40.0 layout.size.width;
  assert_eq ~msg:"height of node6" 20.0 layout.size.height;
  assert_eq ~msg:"x of node6" 0.0 layout.location.x;
  assert_eq ~msg:"y of node6" 120.0 layout.location.y;
  let layout = Toffee.layout tree node7 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node7" 40.0 layout.size.width;
  assert_eq ~msg:"height of node7" 20.0 layout.size.height;
  assert_eq ~msg:"x of node7" 0.0 layout.location.x;
  assert_eq ~msg:"y of node7" 140.0 layout.location.y;
  let layout = Toffee.layout tree node8 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node8" 40.0 layout.size.width;
  assert_eq ~msg:"height of node8" 20.0 layout.size.height;
  assert_eq ~msg:"x of node8" 0.0 layout.location.x;
  assert_eq ~msg:"y of node8" 160.0 layout.location.y;
  let layout = Toffee.layout tree node9 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node9" 40.0 layout.size.width;
  assert_eq ~msg:"height of node9" 20.0 layout.size.height;
  assert_eq ~msg:"x of node9" 0.0 layout.location.x;
  assert_eq ~msg:"y of node9" 180.0 layout.location.y;
  let layout = Toffee.layout tree node10 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node10" 40.0 layout.size.width;
  assert_eq ~msg:"height of node10" 20.0 layout.size.height;
  assert_eq ~msg:"x of node10" 40.0 layout.location.x;
  assert_eq ~msg:"y of node10" 0.0 layout.location.y;
  let layout = Toffee.layout tree node11 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node11" 40.0 layout.size.width;
  assert_eq ~msg:"height of node11" 20.0 layout.size.height;
  assert_eq ~msg:"x of node11" 40.0 layout.location.x;
  assert_eq ~msg:"y of node11" 20.0 layout.location.y;
  let layout = Toffee.layout tree node12 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node12" 40.0 layout.size.width;
  assert_eq ~msg:"height of node12" 20.0 layout.size.height;
  assert_eq ~msg:"x of node12" 40.0 layout.location.x;
  assert_eq ~msg:"y of node12" 40.0 layout.location.y;
  let layout = Toffee.layout tree node13 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node13" 40.0 layout.size.width;
  assert_eq ~msg:"height of node13" 20.0 layout.size.height;
  assert_eq ~msg:"x of node13" 40.0 layout.location.x;
  assert_eq ~msg:"y of node13" 60.0 layout.location.y;
  let layout = Toffee.layout tree node14 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node14" 40.0 layout.size.width;
  assert_eq ~msg:"height of node14" 20.0 layout.size.height;
  assert_eq ~msg:"x of node14" 40.0 layout.location.x;
  assert_eq ~msg:"y of node14" 80.0 layout.location.y;
  let layout = Toffee.layout tree node15 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node15" 40.0 layout.size.width;
  assert_eq ~msg:"height of node15" 20.0 layout.size.height;
  assert_eq ~msg:"x of node15" 40.0 layout.location.x;
  assert_eq ~msg:"y of node15" 100.0 layout.location.y;
  let layout = Toffee.layout tree node16 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node16" 40.0 layout.size.width;
  assert_eq ~msg:"height of node16" 20.0 layout.size.height;
  assert_eq ~msg:"x of node16" 40.0 layout.location.x;
  assert_eq ~msg:"y of node16" 120.0 layout.location.y;
  let layout = Toffee.layout tree node17 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node17" 40.0 layout.size.width;
  assert_eq ~msg:"height of node17" 20.0 layout.size.height;
  assert_eq ~msg:"x of node17" 40.0 layout.location.x;
  assert_eq ~msg:"y of node17" 140.0 layout.location.y;
  let layout = Toffee.layout tree node18 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node18" 40.0 layout.size.width;
  assert_eq ~msg:"height of node18" 20.0 layout.size.height;
  assert_eq ~msg:"x of node18" 40.0 layout.location.x;
  assert_eq ~msg:"y of node18" 160.0 layout.location.y;
  let layout = Toffee.layout tree node19 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node19" 40.0 layout.size.width;
  assert_eq ~msg:"height of node19" 20.0 layout.size.height;
  assert_eq ~msg:"x of node19" 40.0 layout.location.x;
  assert_eq ~msg:"y of node19" 180.0 layout.location.y;
  ()


(* Test runner *)
let () =
  let open Alcotest in
  run "Toffee multiline_column_max_height Test" [
    "flex_multiline_column_max_height", [
      test_case "multiline_column_max_height (border-box)" `Quick test_multiline_column_max_height_border_box;
      test_case "multiline_column_max_height (content-box)" `Quick test_multiline_column_max_height_content_box;
    ];
  ]
