(* Generated test for multiline_column_max_height in flex layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee

let test_flex_multiline_column_max_height_border_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = new_tree () in

  (* Create nodes *)
  let node =
    new_leaf tree
      (Style.make ~display:Style.Display.Flex
         ~flex_direction:Style.Flex_direction.Column
         ~flex_wrap:Style.Flex_wrap.Wrap
         ~max_size:
           {
             width = Style.Dimension.auto;
             height = Style.Dimension.length 200.0;
           }
         ())
    |> Result.get_ok
  in
  let node0 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node0 |> Result.get_ok in
  let node1 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node1 |> Result.get_ok in
  let node2 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node2 |> Result.get_ok in
  let node3 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node3 |> Result.get_ok in
  let node4 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node4 |> Result.get_ok in
  let node5 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node5 |> Result.get_ok in
  let node6 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node6 |> Result.get_ok in
  let node7 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node7 |> Result.get_ok in
  let node8 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node8 |> Result.get_ok in
  let node9 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node9 |> Result.get_ok in
  let node10 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node10 |> Result.get_ok in
  let node11 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node11 |> Result.get_ok in
  let node12 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node12 |> Result.get_ok in
  let node13 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node13 |> Result.get_ok in
  let node14 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node14 |> Result.get_ok in
  let node15 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node15 |> Result.get_ok in
  let node16 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node16 |> Result.get_ok in
  let node17 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node17 |> Result.get_ok in
  let node18 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node18 |> Result.get_ok in
  let node19 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node19 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    compute_layout tree node
      {
        width = Available_space.Max_content;
        height = Available_space.Max_content;
      }
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout_result = layout tree node |> Result.get_ok in
  assert_eq ~msg:"width of node" 80.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node" 200.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node0 |> Result.get_ok in
  assert_eq ~msg:"width of node0" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node0" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node0" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node0" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node1 |> Result.get_ok in
  assert_eq ~msg:"width of node1" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node1" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node1" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node1" 20.0 (Layout.location layout_result).y;
  let layout_result = layout tree node2 |> Result.get_ok in
  assert_eq ~msg:"width of node2" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node2" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node2" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node2" 40.0 (Layout.location layout_result).y;
  let layout_result = layout tree node3 |> Result.get_ok in
  assert_eq ~msg:"width of node3" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node3" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node3" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node3" 60.0 (Layout.location layout_result).y;
  let layout_result = layout tree node4 |> Result.get_ok in
  assert_eq ~msg:"width of node4" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node4" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node4" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node4" 80.0 (Layout.location layout_result).y;
  let layout_result = layout tree node5 |> Result.get_ok in
  assert_eq ~msg:"width of node5" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node5" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node5" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node5" 100.0 (Layout.location layout_result).y;
  let layout_result = layout tree node6 |> Result.get_ok in
  assert_eq ~msg:"width of node6" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node6" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node6" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node6" 120.0 (Layout.location layout_result).y;
  let layout_result = layout tree node7 |> Result.get_ok in
  assert_eq ~msg:"width of node7" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node7" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node7" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node7" 140.0 (Layout.location layout_result).y;
  let layout_result = layout tree node8 |> Result.get_ok in
  assert_eq ~msg:"width of node8" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node8" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node8" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node8" 160.0 (Layout.location layout_result).y;
  let layout_result = layout tree node9 |> Result.get_ok in
  assert_eq ~msg:"width of node9" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node9" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node9" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node9" 180.0 (Layout.location layout_result).y;
  let layout_result = layout tree node10 |> Result.get_ok in
  assert_eq ~msg:"width of node10" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node10" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node10" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node10" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node11 |> Result.get_ok in
  assert_eq ~msg:"width of node11" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node11" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node11" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node11" 20.0 (Layout.location layout_result).y;
  let layout_result = layout tree node12 |> Result.get_ok in
  assert_eq ~msg:"width of node12" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node12" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node12" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node12" 40.0 (Layout.location layout_result).y;
  let layout_result = layout tree node13 |> Result.get_ok in
  assert_eq ~msg:"width of node13" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node13" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node13" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node13" 60.0 (Layout.location layout_result).y;
  let layout_result = layout tree node14 |> Result.get_ok in
  assert_eq ~msg:"width of node14" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node14" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node14" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node14" 80.0 (Layout.location layout_result).y;
  let layout_result = layout tree node15 |> Result.get_ok in
  assert_eq ~msg:"width of node15" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node15" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node15" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node15" 100.0 (Layout.location layout_result).y;
  let layout_result = layout tree node16 |> Result.get_ok in
  assert_eq ~msg:"width of node16" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node16" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node16" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node16" 120.0 (Layout.location layout_result).y;
  let layout_result = layout tree node17 |> Result.get_ok in
  assert_eq ~msg:"width of node17" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node17" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node17" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node17" 140.0 (Layout.location layout_result).y;
  let layout_result = layout tree node18 |> Result.get_ok in
  assert_eq ~msg:"width of node18" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node18" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node18" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node18" 160.0 (Layout.location layout_result).y;
  let layout_result = layout tree node19 |> Result.get_ok in
  assert_eq ~msg:"width of node19" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node19" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node19" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node19" 180.0 (Layout.location layout_result).y;
  ()

let test_flex_multiline_column_max_height_content_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = new_tree () in

  (* Create nodes *)
  let node =
    new_leaf tree
      (Style.make ~display:Style.Display.Flex
         ~flex_direction:Style.Flex_direction.Column
         ~flex_wrap:Style.Flex_wrap.Wrap
         ~max_size:
           {
             width = Style.Dimension.auto;
             height = Style.Dimension.length 200.0;
           }
         ())
    |> Result.get_ok
  in
  let node0 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node0 |> Result.get_ok in
  let node1 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node1 |> Result.get_ok in
  let node2 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node2 |> Result.get_ok in
  let node3 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node3 |> Result.get_ok in
  let node4 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node4 |> Result.get_ok in
  let node5 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node5 |> Result.get_ok in
  let node6 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node6 |> Result.get_ok in
  let node7 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node7 |> Result.get_ok in
  let node8 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node8 |> Result.get_ok in
  let node9 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node9 |> Result.get_ok in
  let node10 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node10 |> Result.get_ok in
  let node11 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node11 |> Result.get_ok in
  let node12 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node12 |> Result.get_ok in
  let node13 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node13 |> Result.get_ok in
  let node14 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node14 |> Result.get_ok in
  let node15 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node15 |> Result.get_ok in
  let node16 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node16 |> Result.get_ok in
  let node17 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node17 |> Result.get_ok in
  let node18 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node18 |> Result.get_ok in
  let node19 =
    new_leaf tree
      (Style.make ~flex_shrink:0.0
         ~size:
           {
             width = Style.Dimension.length 40.0;
             height = Style.Dimension.length 20.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node19 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    compute_layout tree node
      {
        width = Available_space.Max_content;
        height = Available_space.Max_content;
      }
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout_result = layout tree node |> Result.get_ok in
  assert_eq ~msg:"width of node" 80.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node" 200.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node0 |> Result.get_ok in
  assert_eq ~msg:"width of node0" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node0" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node0" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node0" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node1 |> Result.get_ok in
  assert_eq ~msg:"width of node1" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node1" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node1" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node1" 20.0 (Layout.location layout_result).y;
  let layout_result = layout tree node2 |> Result.get_ok in
  assert_eq ~msg:"width of node2" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node2" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node2" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node2" 40.0 (Layout.location layout_result).y;
  let layout_result = layout tree node3 |> Result.get_ok in
  assert_eq ~msg:"width of node3" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node3" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node3" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node3" 60.0 (Layout.location layout_result).y;
  let layout_result = layout tree node4 |> Result.get_ok in
  assert_eq ~msg:"width of node4" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node4" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node4" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node4" 80.0 (Layout.location layout_result).y;
  let layout_result = layout tree node5 |> Result.get_ok in
  assert_eq ~msg:"width of node5" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node5" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node5" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node5" 100.0 (Layout.location layout_result).y;
  let layout_result = layout tree node6 |> Result.get_ok in
  assert_eq ~msg:"width of node6" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node6" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node6" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node6" 120.0 (Layout.location layout_result).y;
  let layout_result = layout tree node7 |> Result.get_ok in
  assert_eq ~msg:"width of node7" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node7" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node7" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node7" 140.0 (Layout.location layout_result).y;
  let layout_result = layout tree node8 |> Result.get_ok in
  assert_eq ~msg:"width of node8" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node8" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node8" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node8" 160.0 (Layout.location layout_result).y;
  let layout_result = layout tree node9 |> Result.get_ok in
  assert_eq ~msg:"width of node9" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node9" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node9" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node9" 180.0 (Layout.location layout_result).y;
  let layout_result = layout tree node10 |> Result.get_ok in
  assert_eq ~msg:"width of node10" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node10" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node10" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node10" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node11 |> Result.get_ok in
  assert_eq ~msg:"width of node11" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node11" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node11" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node11" 20.0 (Layout.location layout_result).y;
  let layout_result = layout tree node12 |> Result.get_ok in
  assert_eq ~msg:"width of node12" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node12" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node12" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node12" 40.0 (Layout.location layout_result).y;
  let layout_result = layout tree node13 |> Result.get_ok in
  assert_eq ~msg:"width of node13" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node13" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node13" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node13" 60.0 (Layout.location layout_result).y;
  let layout_result = layout tree node14 |> Result.get_ok in
  assert_eq ~msg:"width of node14" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node14" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node14" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node14" 80.0 (Layout.location layout_result).y;
  let layout_result = layout tree node15 |> Result.get_ok in
  assert_eq ~msg:"width of node15" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node15" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node15" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node15" 100.0 (Layout.location layout_result).y;
  let layout_result = layout tree node16 |> Result.get_ok in
  assert_eq ~msg:"width of node16" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node16" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node16" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node16" 120.0 (Layout.location layout_result).y;
  let layout_result = layout tree node17 |> Result.get_ok in
  assert_eq ~msg:"width of node17" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node17" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node17" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node17" 140.0 (Layout.location layout_result).y;
  let layout_result = layout tree node18 |> Result.get_ok in
  assert_eq ~msg:"width of node18" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node18" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node18" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node18" 160.0 (Layout.location layout_result).y;
  let layout_result = layout tree node19 |> Result.get_ok in
  assert_eq ~msg:"width of node19" 40.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node19" 20.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node19" 40.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node19" 180.0 (Layout.location layout_result).y;
  ()

(* Export tests for aggregation *)
let tests =
  let open Alcotest in
  [
    test_case "multiline_column_max_height (border-box)" `Quick
      test_flex_multiline_column_max_height_border_box;
    test_case "multiline_column_max_height (content-box)" `Quick
      test_flex_multiline_column_max_height_content_box;
  ]
