(* Generated test for block_absolute_layout_percentage_bottom_based_on_parent_height in block layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee

let test_block_absolute_layout_percentage_bottom_based_on_parent_height_border_box
    () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = new_tree () in

  (* Create nodes *)
  let node1 =
    new_leaf tree
      (Style.make ~display:Style.Display.Block ~position:Style.Position.Absolute
         ~size:
           {
             width = Style.Dimension.length 10.0;
             height = Style.Dimension.length 10.0;
           }
         ~inset:
           {
             left = Style.Length_percentage_auto.auto;
             right = Style.Length_percentage_auto.auto;
             top = Style.Length_percentage_auto.percent 0.5;
             bottom = Style.Length_percentage_auto.auto;
           }
         ())
    |> Result.get_ok
  in
  let node2 =
    new_leaf tree
      (Style.make ~display:Style.Display.Block ~position:Style.Position.Absolute
         ~size:
           {
             width = Style.Dimension.length 10.0;
             height = Style.Dimension.length 10.0;
           }
         ~inset:
           {
             left = Style.Length_percentage_auto.auto;
             right = Style.Length_percentage_auto.auto;
             top = Style.Length_percentage_auto.auto;
             bottom = Style.Length_percentage_auto.percent 0.5;
           }
         ())
    |> Result.get_ok
  in
  let node3 =
    new_leaf tree
      (Style.make ~display:Style.Display.Block ~position:Style.Position.Absolute
         ~size:
           {
             width = Style.Dimension.length 10.0;
             height = Style.Dimension.auto;
           }
         ~inset:
           {
             left = Style.Length_percentage_auto.auto;
             right = Style.Length_percentage_auto.auto;
             top = Style.Length_percentage_auto.percent 0.1;
             bottom = Style.Length_percentage_auto.percent 0.1;
           }
         ())
    |> Result.get_ok
  in
  let node0 =
    new_with_children tree
      (Style.make ~display:Style.Display.Block
         ~size:
           {
             width = Style.Dimension.length 100.0;
             height = Style.Dimension.length 200.0;
           }
         ())
      [| node1; node2; node3 |]
    |> Result.get_ok
  in

  (* Compute layout *)
  let _ =
    compute_layout tree node0
      {
        width = Available_space.Max_content;
        height = Available_space.Max_content;
      }
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  print_tree tree node0;
  Printf.printf "\n";

  (* Verify layout *)
  let layout_result = layout tree node1 |> Result.get_ok in
  assert_eq ~msg:"width of node1" 10.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node1" 10.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node1" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node1" 100.0 (Layout.location layout_result).y;
  let layout_result = layout tree node2 |> Result.get_ok in
  assert_eq ~msg:"width of node2" 10.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node2" 10.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node2" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node2" 90.0 (Layout.location layout_result).y;
  let layout_result = layout tree node3 |> Result.get_ok in
  assert_eq ~msg:"width of node3" 10.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node3" 160.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node3" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node3" 20.0 (Layout.location layout_result).y;
  let layout_result = layout tree node0 |> Result.get_ok in
  assert_eq ~msg:"width of node0" 100.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node0" 200.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node0" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node0" 0.0 (Layout.location layout_result).y;
  ()

let test_block_absolute_layout_percentage_bottom_based_on_parent_height_content_box
    () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = new_tree () in

  (* Create nodes *)
  let node1 =
    new_leaf tree
      (Style.make ~display:Style.Display.Block ~position:Style.Position.Absolute
         ~size:
           {
             width = Style.Dimension.length 10.0;
             height = Style.Dimension.length 10.0;
           }
         ~inset:
           {
             left = Style.Length_percentage_auto.auto;
             right = Style.Length_percentage_auto.auto;
             top = Style.Length_percentage_auto.percent 0.5;
             bottom = Style.Length_percentage_auto.auto;
           }
         ~box_sizing:Style.Box_sizing.Content_box ())
    |> Result.get_ok
  in
  let node2 =
    new_leaf tree
      (Style.make ~display:Style.Display.Block ~position:Style.Position.Absolute
         ~size:
           {
             width = Style.Dimension.length 10.0;
             height = Style.Dimension.length 10.0;
           }
         ~inset:
           {
             left = Style.Length_percentage_auto.auto;
             right = Style.Length_percentage_auto.auto;
             top = Style.Length_percentage_auto.auto;
             bottom = Style.Length_percentage_auto.percent 0.5;
           }
         ~box_sizing:Style.Box_sizing.Content_box ())
    |> Result.get_ok
  in
  let node3 =
    new_leaf tree
      (Style.make ~display:Style.Display.Block ~position:Style.Position.Absolute
         ~size:
           {
             width = Style.Dimension.length 10.0;
             height = Style.Dimension.auto;
           }
         ~inset:
           {
             left = Style.Length_percentage_auto.auto;
             right = Style.Length_percentage_auto.auto;
             top = Style.Length_percentage_auto.percent 0.1;
             bottom = Style.Length_percentage_auto.percent 0.1;
           }
         ~box_sizing:Style.Box_sizing.Content_box ())
    |> Result.get_ok
  in
  let node0 =
    new_with_children tree
      (Style.make ~display:Style.Display.Block
         ~size:
           {
             width = Style.Dimension.length 100.0;
             height = Style.Dimension.length 200.0;
           }
         ~box_sizing:Style.Box_sizing.Content_box ())
      [| node1; node2; node3 |]
    |> Result.get_ok
  in

  (* Compute layout *)
  let _ =
    compute_layout tree node0
      {
        width = Available_space.Max_content;
        height = Available_space.Max_content;
      }
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  print_tree tree node0;
  Printf.printf "\n";

  (* Verify layout *)
  let layout_result = layout tree node1 |> Result.get_ok in
  assert_eq ~msg:"width of node1" 10.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node1" 10.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node1" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node1" 100.0 (Layout.location layout_result).y;
  let layout_result = layout tree node2 |> Result.get_ok in
  assert_eq ~msg:"width of node2" 10.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node2" 10.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node2" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node2" 90.0 (Layout.location layout_result).y;
  let layout_result = layout tree node3 |> Result.get_ok in
  assert_eq ~msg:"width of node3" 10.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node3" 160.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node3" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node3" 20.0 (Layout.location layout_result).y;
  let layout_result = layout tree node0 |> Result.get_ok in
  assert_eq ~msg:"width of node0" 100.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node0" 200.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node0" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node0" 0.0 (Layout.location layout_result).y;
  ()

(* Export tests for aggregation *)
let tests =
  let open Alcotest in
  [
    test_case
      "absolute_layout_percentage_bottom_based_on_parent_height (border-box)"
      `Quick
      test_block_absolute_layout_percentage_bottom_based_on_parent_height_border_box;
    test_case
      "absolute_layout_percentage_bottom_based_on_parent_height (content-box)"
      `Quick
      test_block_absolute_layout_percentage_bottom_based_on_parent_height_content_box;
  ]
