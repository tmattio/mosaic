
(* Generated test for align_items_center_with_height_with_padding_border_with_wrap in flex layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee




let test_align_items_center_with_height_with_padding_border_with_wrap_border_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in
  
  let tree = Toffee.create () in
  
  
  (* Create nodes *)
  let node = Toffee.new_leaf tree (Toffee.Style.default) in
  let node0 = Toffee.new_leaf tree ({ Toffee.Style.default with display = Toffee.Style.Flex; flex_wrap = Toffee.Style.Flex.Wrap; align_items = Some (Toffee.Style.Alignment.Center); align_content = Some (Toffee.Style.Alignment.Flex_start); size = { width = Toffee.Style.Dimension.length 100.0; height = Toffee.Style.Dimension.length 100.0 } }) in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 = Toffee.new_leaf tree ({ Toffee.Style.default with size = { width = Toffee.Style.Dimension.length 10.0; height = Toffee.Style.Dimension.length 10.0 } }) in
  let _ = Toffee.add_child tree node0 node1 |> Result.get_ok in
  let node2 = Toffee.new_leaf tree ({ Toffee.Style.default with size = { width = Toffee.Style.Dimension.length 10.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node0 node2 |> Result.get_ok in
  let node3 = Toffee.new_leaf tree ({ Toffee.Style.default with display = Toffee.Style.Flex; flex_wrap = Toffee.Style.Flex.Wrap; align_items = Some (Toffee.Style.Alignment.Center); size = { width = Toffee.Style.Dimension.length 100.0; height = Toffee.Style.Dimension.length 100.0 } }) in
  let _ = Toffee.add_child tree node node3 |> Result.get_ok in
  let node4 = Toffee.new_leaf tree ({ Toffee.Style.default with size = { width = Toffee.Style.Dimension.length 10.0; height = Toffee.Style.Dimension.length 10.0 } }) in
  let _ = Toffee.add_child tree node3 node4 |> Result.get_ok in
  let node5 = Toffee.new_leaf tree ({ Toffee.Style.default with size = { width = Toffee.Style.Dimension.length 10.0; height = Toffee.Style.Dimension.length 20.0 } }) in
  let _ = Toffee.add_child tree node3 node5 |> Result.get_ok in
  
  (* Compute layout *)
  let _ = Toffee.compute_layout tree node {
    width = Toffee.Style.Available_space.Max_content;
    height = Toffee.Style.Available_space.Max_content;
  } |> Result.get_ok in
  
  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";
  
  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 200.0 layout.size.width;
  assert_eq ~msg:"height of node" 100.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 100.0 layout.size.width;
  assert_eq ~msg:"height of node0" 100.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 10.0 layout.size.width;
  assert_eq ~msg:"height of node1" 10.0 layout.size.height;
  assert_eq ~msg:"x of node1" 0.0 layout.location.x;
  assert_eq ~msg:"y of node1" 5.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 10.0 layout.size.width;
  assert_eq ~msg:"height of node2" 20.0 layout.size.height;
  assert_eq ~msg:"x of node2" 10.0 layout.location.x;
  assert_eq ~msg:"y of node2" 0.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 100.0 layout.size.width;
  assert_eq ~msg:"height of node3" 100.0 layout.size.height;
  assert_eq ~msg:"x of node3" 100.0 layout.location.x;
  assert_eq ~msg:"y of node3" 0.0 layout.location.y;
  let layout = Toffee.layout tree node4 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node4" 10.0 layout.size.width;
  assert_eq ~msg:"height of node4" 10.0 layout.size.height;
  assert_eq ~msg:"x of node4" 0.0 layout.location.x;
  assert_eq ~msg:"y of node4" 45.0 layout.location.y;
  let layout = Toffee.layout tree node5 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node5" 10.0 layout.size.width;
  assert_eq ~msg:"height of node5" 20.0 layout.size.height;
  assert_eq ~msg:"x of node5" 10.0 layout.location.x;
  assert_eq ~msg:"y of node5" 40.0 layout.location.y;
  ()



let test_align_items_center_with_height_with_padding_border_with_wrap_content_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in
  
  let tree = Toffee.create () in
  
  
  (* Create nodes *)
  let node = Toffee.new_leaf tree ({ Toffee.Style.default with box_sizing = Toffee.Style.Content_box }) in
  let node0 = Toffee.new_leaf tree ({ Toffee.Style.default with display = Toffee.Style.Flex; flex_wrap = Toffee.Style.Flex.Wrap; align_items = Some (Toffee.Style.Alignment.Center); align_content = Some (Toffee.Style.Alignment.Flex_start); size = { width = Toffee.Style.Dimension.length 100.0; height = Toffee.Style.Dimension.length 100.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 = Toffee.new_leaf tree ({ Toffee.Style.default with size = { width = Toffee.Style.Dimension.length 10.0; height = Toffee.Style.Dimension.length 10.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node0 node1 |> Result.get_ok in
  let node2 = Toffee.new_leaf tree ({ Toffee.Style.default with size = { width = Toffee.Style.Dimension.length 10.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node0 node2 |> Result.get_ok in
  let node3 = Toffee.new_leaf tree ({ Toffee.Style.default with display = Toffee.Style.Flex; flex_wrap = Toffee.Style.Flex.Wrap; align_items = Some (Toffee.Style.Alignment.Center); size = { width = Toffee.Style.Dimension.length 100.0; height = Toffee.Style.Dimension.length 100.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node3 |> Result.get_ok in
  let node4 = Toffee.new_leaf tree ({ Toffee.Style.default with size = { width = Toffee.Style.Dimension.length 10.0; height = Toffee.Style.Dimension.length 10.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node3 node4 |> Result.get_ok in
  let node5 = Toffee.new_leaf tree ({ Toffee.Style.default with size = { width = Toffee.Style.Dimension.length 10.0; height = Toffee.Style.Dimension.length 20.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node3 node5 |> Result.get_ok in
  
  (* Compute layout *)
  let _ = Toffee.compute_layout tree node {
    width = Toffee.Style.Available_space.Max_content;
    height = Toffee.Style.Available_space.Max_content;
  } |> Result.get_ok in
  
  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";
  
  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 200.0 layout.size.width;
  assert_eq ~msg:"height of node" 100.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 100.0 layout.size.width;
  assert_eq ~msg:"height of node0" 100.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 10.0 layout.size.width;
  assert_eq ~msg:"height of node1" 10.0 layout.size.height;
  assert_eq ~msg:"x of node1" 0.0 layout.location.x;
  assert_eq ~msg:"y of node1" 5.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 10.0 layout.size.width;
  assert_eq ~msg:"height of node2" 20.0 layout.size.height;
  assert_eq ~msg:"x of node2" 10.0 layout.location.x;
  assert_eq ~msg:"y of node2" 0.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 100.0 layout.size.width;
  assert_eq ~msg:"height of node3" 100.0 layout.size.height;
  assert_eq ~msg:"x of node3" 100.0 layout.location.x;
  assert_eq ~msg:"y of node3" 0.0 layout.location.y;
  let layout = Toffee.layout tree node4 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node4" 10.0 layout.size.width;
  assert_eq ~msg:"height of node4" 10.0 layout.size.height;
  assert_eq ~msg:"x of node4" 0.0 layout.location.x;
  assert_eq ~msg:"y of node4" 45.0 layout.location.y;
  let layout = Toffee.layout tree node5 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node5" 10.0 layout.size.width;
  assert_eq ~msg:"height of node5" 20.0 layout.size.height;
  assert_eq ~msg:"x of node5" 10.0 layout.location.x;
  assert_eq ~msg:"y of node5" 40.0 layout.location.y;
  ()


(* Test runner *)
let () =
  let open Alcotest in
  run "Toffee align_items_center_with_height_with_padding_border_with_wrap Test" [
    "flex_align_items_center_with_height_with_padding_border_with_wrap", [
      test_case "align_items_center_with_height_with_padding_border_with_wrap (border-box)" `Quick test_align_items_center_with_height_with_padding_border_with_wrap_border_box;
      test_case "align_items_center_with_height_with_padding_border_with_wrap (content-box)" `Quick test_align_items_center_with_height_with_padding_border_with_wrap_content_box;
    ];
  ]
