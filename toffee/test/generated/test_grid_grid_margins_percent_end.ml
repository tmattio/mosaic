
(* Generated test for grid_margins_percent_end in grid layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee




let test_grid_margins_percent_end_border_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in
  
  let tree = Toffee.create () in
  
  
  (* Create nodes *)
  let node = Toffee.new_leaf tree ({ Toffee.Style.default with display = Toffee.Style.Grid; grid_template_columns = [Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Length (20.0); max = Toffee.Style.Grid.Length (20.0) }; Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Length (20.0); max = Toffee.Style.Grid.Length (20.0) }; Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Length (20.0); max = Toffee.Style.Grid.Length (20.0) }]; grid_template_rows = [Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Length (40.0); max = Toffee.Style.Grid.Length (40.0) }; Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Length (40.0); max = Toffee.Style.Grid.Length (40.0) }; Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Length (40.0); max = Toffee.Style.Grid.Length (40.0) }] }) in
  let node0 = Toffee.new_leaf tree ({ Toffee.Style.default with align_self = Some (Toffee.Style.Alignment.End); justify_self = Some (Toffee.Style.Alignment.End); size = { width = Toffee.Style.Dimension.length 20.0; height = Toffee.Style.Dimension.length 20.0 }; margin = { left = Toffee.Style.Length_percentage_auto.Percent (0.2); right = Toffee.Style.Length_percentage_auto.Percent (0.1); top = Toffee.Style.Length_percentage_auto.Percent (0.05); bottom = Toffee.Style.Length_percentage_auto.Percent (0.15) } }) in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 = Toffee.new_leaf tree (Toffee.Style.default) in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in
  let node2 = Toffee.new_leaf tree (Toffee.Style.default) in
  let _ = Toffee.add_child tree node node2 |> Result.get_ok in
  let node3 = Toffee.new_leaf tree (Toffee.Style.default) in
  let _ = Toffee.add_child tree node node3 |> Result.get_ok in
  let node4 = Toffee.new_leaf tree (Toffee.Style.default) in
  let _ = Toffee.add_child tree node node4 |> Result.get_ok in
  let node5 = Toffee.new_leaf tree (Toffee.Style.default) in
  let _ = Toffee.add_child tree node node5 |> Result.get_ok in
  
  (* Compute layout *)
  let _ = Toffee.compute_layout tree node {
    width = Toffee.Style.Available_space.Max_content;
    height = Toffee.Style.Available_space.Max_content;
  } |> Result.get_ok in
  
  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";
  
  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 60.0 layout.size.width;
  assert_eq ~msg:"height of node" 120.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 20.0 layout.size.width;
  assert_eq ~msg:"height of node0" 20.0 layout.size.height;
  assert_eq ~msg:"x of node0" (-2.0) layout.location.x;
  assert_eq ~msg:"y of node0" 17.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 20.0 layout.size.width;
  assert_eq ~msg:"height of node1" 40.0 layout.size.height;
  assert_eq ~msg:"x of node1" 20.0 layout.location.x;
  assert_eq ~msg:"y of node1" 0.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 20.0 layout.size.width;
  assert_eq ~msg:"height of node2" 40.0 layout.size.height;
  assert_eq ~msg:"x of node2" 40.0 layout.location.x;
  assert_eq ~msg:"y of node2" 0.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 20.0 layout.size.width;
  assert_eq ~msg:"height of node3" 40.0 layout.size.height;
  assert_eq ~msg:"x of node3" 0.0 layout.location.x;
  assert_eq ~msg:"y of node3" 40.0 layout.location.y;
  let layout = Toffee.layout tree node4 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node4" 20.0 layout.size.width;
  assert_eq ~msg:"height of node4" 40.0 layout.size.height;
  assert_eq ~msg:"x of node4" 20.0 layout.location.x;
  assert_eq ~msg:"y of node4" 40.0 layout.location.y;
  let layout = Toffee.layout tree node5 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node5" 20.0 layout.size.width;
  assert_eq ~msg:"height of node5" 40.0 layout.size.height;
  assert_eq ~msg:"x of node5" 40.0 layout.location.x;
  assert_eq ~msg:"y of node5" 40.0 layout.location.y;
  ()



let test_grid_margins_percent_end_content_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in
  
  let tree = Toffee.create () in
  
  
  (* Create nodes *)
  let node = Toffee.new_leaf tree ({ Toffee.Style.default with display = Toffee.Style.Grid; grid_template_columns = [Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Length (20.0); max = Toffee.Style.Grid.Length (20.0) }; Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Length (20.0); max = Toffee.Style.Grid.Length (20.0) }; Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Length (20.0); max = Toffee.Style.Grid.Length (20.0) }]; grid_template_rows = [Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Length (40.0); max = Toffee.Style.Grid.Length (40.0) }; Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Length (40.0); max = Toffee.Style.Grid.Length (40.0) }; Toffee.Style.Grid.Single { min = Toffee.Style.Grid.Length (40.0); max = Toffee.Style.Grid.Length (40.0) }]; box_sizing = Toffee.Style.Content_box }) in
  let node0 = Toffee.new_leaf tree ({ Toffee.Style.default with align_self = Some (Toffee.Style.Alignment.End); justify_self = Some (Toffee.Style.Alignment.End); size = { width = Toffee.Style.Dimension.length 20.0; height = Toffee.Style.Dimension.length 20.0 }; margin = { left = Toffee.Style.Length_percentage_auto.Percent (0.2); right = Toffee.Style.Length_percentage_auto.Percent (0.1); top = Toffee.Style.Length_percentage_auto.Percent (0.05); bottom = Toffee.Style.Length_percentage_auto.Percent (0.15) }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 = Toffee.new_leaf tree ({ Toffee.Style.default with box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in
  let node2 = Toffee.new_leaf tree ({ Toffee.Style.default with box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node2 |> Result.get_ok in
  let node3 = Toffee.new_leaf tree ({ Toffee.Style.default with box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node3 |> Result.get_ok in
  let node4 = Toffee.new_leaf tree ({ Toffee.Style.default with box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node4 |> Result.get_ok in
  let node5 = Toffee.new_leaf tree ({ Toffee.Style.default with box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node5 |> Result.get_ok in
  
  (* Compute layout *)
  let _ = Toffee.compute_layout tree node {
    width = Toffee.Style.Available_space.Max_content;
    height = Toffee.Style.Available_space.Max_content;
  } |> Result.get_ok in
  
  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";
  
  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 60.0 layout.size.width;
  assert_eq ~msg:"height of node" 120.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 20.0 layout.size.width;
  assert_eq ~msg:"height of node0" 20.0 layout.size.height;
  assert_eq ~msg:"x of node0" (-2.0) layout.location.x;
  assert_eq ~msg:"y of node0" 17.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 20.0 layout.size.width;
  assert_eq ~msg:"height of node1" 40.0 layout.size.height;
  assert_eq ~msg:"x of node1" 20.0 layout.location.x;
  assert_eq ~msg:"y of node1" 0.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 20.0 layout.size.width;
  assert_eq ~msg:"height of node2" 40.0 layout.size.height;
  assert_eq ~msg:"x of node2" 40.0 layout.location.x;
  assert_eq ~msg:"y of node2" 0.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 20.0 layout.size.width;
  assert_eq ~msg:"height of node3" 40.0 layout.size.height;
  assert_eq ~msg:"x of node3" 0.0 layout.location.x;
  assert_eq ~msg:"y of node3" 40.0 layout.location.y;
  let layout = Toffee.layout tree node4 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node4" 20.0 layout.size.width;
  assert_eq ~msg:"height of node4" 40.0 layout.size.height;
  assert_eq ~msg:"x of node4" 20.0 layout.location.x;
  assert_eq ~msg:"y of node4" 40.0 layout.location.y;
  let layout = Toffee.layout tree node5 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node5" 20.0 layout.size.width;
  assert_eq ~msg:"height of node5" 40.0 layout.size.height;
  assert_eq ~msg:"x of node5" 40.0 layout.location.x;
  assert_eq ~msg:"y of node5" 40.0 layout.location.y;
  ()


(* Test runner *)
let () =
  let open Alcotest in
  run "Toffee grid_margins_percent_end Test" [
    "grid_grid_margins_percent_end", [
      test_case "grid_margins_percent_end (border-box)" `Quick test_grid_margins_percent_end_border_box;
      test_case "grid_margins_percent_end (content-box)" `Quick test_grid_margins_percent_end_content_box;
    ];
  ]
