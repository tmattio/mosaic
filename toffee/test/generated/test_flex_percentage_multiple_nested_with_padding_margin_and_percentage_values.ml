
(* Generated test for percentage_multiple_nested_with_padding_margin_and_percentage_values in flex layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee




let test_percentage_multiple_nested_with_padding_margin_and_percentage_values_border_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in
  
  let tree = Toffee.create () in
  
  
  (* Create nodes *)
  let node = Toffee.new_leaf tree ({ Toffee.Style.default with flex_direction = Toffee.Style.Flex.Column; size = { width = Toffee.Style.Dimension.length 200.0; height = Toffee.Style.Dimension.length 200.0 } }) in
  let node0 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_direction = Toffee.Style.Flex.Column; flex_grow = 1.0; flex_basis = Toffee.Style.Dimension.percent 0.1; min_size = { width = Toffee.Style.Dimension.percent 0.6; height = Toffee.Style.Dimension.auto }; margin = { left = Toffee.Style.Length_percentage_auto.Length (5.0); right = Toffee.Style.Length_percentage_auto.Length (5.0); top = Toffee.Style.Length_percentage_auto.Length (5.0); bottom = Toffee.Style.Length_percentage_auto.Length (5.0) }; padding = { left = Toffee.Style.Length_percentage.Length (3.0); right = Toffee.Style.Length_percentage.Length (3.0); top = Toffee.Style.Length_percentage.Length (3.0); bottom = Toffee.Style.Length_percentage.Length (3.0) } }) in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_direction = Toffee.Style.Flex.Column; size = { width = Toffee.Style.Dimension.percent 0.5; height = Toffee.Style.Dimension.auto }; margin = { left = Toffee.Style.Length_percentage_auto.Length (5.0); right = Toffee.Style.Length_percentage_auto.Length (5.0); top = Toffee.Style.Length_percentage_auto.Length (5.0); bottom = Toffee.Style.Length_percentage_auto.Length (5.0) }; padding = { left = Toffee.Style.Length_percentage.Percent (0.03); right = Toffee.Style.Length_percentage.Percent (0.03); top = Toffee.Style.Length_percentage.Percent (0.03); bottom = Toffee.Style.Length_percentage.Percent (0.03) } }) in
  let _ = Toffee.add_child tree node0 node1 |> Result.get_ok in
  let node2 = Toffee.new_leaf tree ({ Toffee.Style.default with size = { width = Toffee.Style.Dimension.percent 0.45; height = Toffee.Style.Dimension.auto }; margin = { left = Toffee.Style.Length_percentage_auto.Percent (0.05); right = Toffee.Style.Length_percentage_auto.Percent (0.05); top = Toffee.Style.Length_percentage_auto.Percent (0.05); bottom = Toffee.Style.Length_percentage_auto.Percent (0.05) }; padding = { left = Toffee.Style.Length_percentage.Length (3.0); right = Toffee.Style.Length_percentage.Length (3.0); top = Toffee.Style.Length_percentage.Length (3.0); bottom = Toffee.Style.Length_percentage.Length (3.0) } }) in
  let _ = Toffee.add_child tree node1 node2 |> Result.get_ok in
  let node3 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_grow = 4.0; flex_basis = Toffee.Style.Dimension.percent 0.15; min_size = { width = Toffee.Style.Dimension.percent 0.2; height = Toffee.Style.Dimension.auto } }) in
  let _ = Toffee.add_child tree node node3 |> Result.get_ok in
  
  (* Compute layout *)
  let _ = Toffee.compute_layout tree node {
    width = Toffee.Style.Available_space.Max_content;
    height = Toffee.Style.Available_space.Max_content;
  } |> Result.get_ok in
  
  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";
  
  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 200.0 layout.size.width;
  assert_eq ~msg:"height of node" 200.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 190.0 layout.size.width;
  assert_eq ~msg:"height of node0" 48.0 layout.size.height;
  assert_eq ~msg:"x of node0" 5.0 layout.location.x;
  assert_eq ~msg:"y of node0" 5.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 92.0 layout.size.width;
  assert_eq ~msg:"height of node1" 25.0 layout.size.height;
  assert_eq ~msg:"x of node1" 8.0 layout.location.x;
  assert_eq ~msg:"y of node1" 8.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 36.0 layout.size.width;
  assert_eq ~msg:"height of node2" 6.0 layout.size.height;
  assert_eq ~msg:"x of node2" 10.0 layout.location.x;
  assert_eq ~msg:"y of node2" 10.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 200.0 layout.size.width;
  assert_eq ~msg:"height of node3" 142.0 layout.size.height;
  assert_eq ~msg:"x of node3" 0.0 layout.location.x;
  assert_eq ~msg:"y of node3" 58.0 layout.location.y;
  ()



let test_percentage_multiple_nested_with_padding_margin_and_percentage_values_content_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in
  
  let tree = Toffee.create () in
  
  
  (* Create nodes *)
  let node = Toffee.new_leaf tree ({ Toffee.Style.default with flex_direction = Toffee.Style.Flex.Column; size = { width = Toffee.Style.Dimension.length 200.0; height = Toffee.Style.Dimension.length 200.0 }; box_sizing = Toffee.Style.Content_box }) in
  let node0 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_direction = Toffee.Style.Flex.Column; flex_grow = 1.0; flex_basis = Toffee.Style.Dimension.percent 0.1; min_size = { width = Toffee.Style.Dimension.percent 0.6; height = Toffee.Style.Dimension.auto }; margin = { left = Toffee.Style.Length_percentage_auto.Length (5.0); right = Toffee.Style.Length_percentage_auto.Length (5.0); top = Toffee.Style.Length_percentage_auto.Length (5.0); bottom = Toffee.Style.Length_percentage_auto.Length (5.0) }; padding = { left = Toffee.Style.Length_percentage.Length (3.0); right = Toffee.Style.Length_percentage.Length (3.0); top = Toffee.Style.Length_percentage.Length (3.0); bottom = Toffee.Style.Length_percentage.Length (3.0) }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_direction = Toffee.Style.Flex.Column; size = { width = Toffee.Style.Dimension.percent 0.5; height = Toffee.Style.Dimension.auto }; margin = { left = Toffee.Style.Length_percentage_auto.Length (5.0); right = Toffee.Style.Length_percentage_auto.Length (5.0); top = Toffee.Style.Length_percentage_auto.Length (5.0); bottom = Toffee.Style.Length_percentage_auto.Length (5.0) }; padding = { left = Toffee.Style.Length_percentage.Percent (0.03); right = Toffee.Style.Length_percentage.Percent (0.03); top = Toffee.Style.Length_percentage.Percent (0.03); bottom = Toffee.Style.Length_percentage.Percent (0.03) }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node0 node1 |> Result.get_ok in
  let node2 = Toffee.new_leaf tree ({ Toffee.Style.default with size = { width = Toffee.Style.Dimension.percent 0.45; height = Toffee.Style.Dimension.auto }; margin = { left = Toffee.Style.Length_percentage_auto.Percent (0.05); right = Toffee.Style.Length_percentage_auto.Percent (0.05); top = Toffee.Style.Length_percentage_auto.Percent (0.05); bottom = Toffee.Style.Length_percentage_auto.Percent (0.05) }; padding = { left = Toffee.Style.Length_percentage.Length (3.0); right = Toffee.Style.Length_percentage.Length (3.0); top = Toffee.Style.Length_percentage.Length (3.0); bottom = Toffee.Style.Length_percentage.Length (3.0) }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node1 node2 |> Result.get_ok in
  let node3 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_grow = 4.0; flex_basis = Toffee.Style.Dimension.percent 0.15; min_size = { width = Toffee.Style.Dimension.percent 0.2; height = Toffee.Style.Dimension.auto }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node3 |> Result.get_ok in
  
  (* Compute layout *)
  let _ = Toffee.compute_layout tree node {
    width = Toffee.Style.Available_space.Max_content;
    height = Toffee.Style.Available_space.Max_content;
  } |> Result.get_ok in
  
  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";
  
  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 200.0 layout.size.width;
  assert_eq ~msg:"height of node" 200.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 190.0 layout.size.width;
  assert_eq ~msg:"height of node0" 53.0 layout.size.height;
  assert_eq ~msg:"x of node0" 5.0 layout.location.x;
  assert_eq ~msg:"y of node0" 5.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 103.0 layout.size.width;
  assert_eq ~msg:"height of node1" 26.0 layout.size.height;
  assert_eq ~msg:"x of node1" 8.0 layout.location.x;
  assert_eq ~msg:"y of node1" 8.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 48.0 layout.size.width;
  assert_eq ~msg:"height of node2" 6.0 layout.size.height;
  assert_eq ~msg:"x of node2" 10.0 layout.location.x;
  assert_eq ~msg:"y of node2" 10.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 200.0 layout.size.width;
  assert_eq ~msg:"height of node3" 137.0 layout.size.height;
  assert_eq ~msg:"x of node3" 0.0 layout.location.x;
  assert_eq ~msg:"y of node3" 63.0 layout.location.y;
  ()


(* Test runner *)
let () =
  let open Alcotest in
  run "Toffee percentage_multiple_nested_with_padding_margin_and_percentage_values Test" [
    "flex_percentage_multiple_nested_with_padding_margin_and_percentage_values", [
      test_case "percentage_multiple_nested_with_padding_margin_and_percentage_values (border-box)" `Quick test_percentage_multiple_nested_with_padding_margin_and_percentage_values_border_box;
      test_case "percentage_multiple_nested_with_padding_margin_and_percentage_values (content-box)" `Quick test_percentage_multiple_nested_with_padding_margin_and_percentage_values_content_box;
    ];
  ]
