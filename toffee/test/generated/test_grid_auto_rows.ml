(* Generated test for grid_auto_rows in grid layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee

let test_grid_auto_rows_border_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = Toffee.create () in

  (* Create nodes *)
  let node =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Grid;
        grid_template_columns =
          [
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 100.0;
                max = Toffee.Style.Grid.Length 100.0;
              };
          ];
        grid_template_rows =
          [
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 40.0;
                max = Toffee.Style.Grid.Length 40.0;
              };
          ];
        grid_auto_rows =
          [
            {
              min = Toffee.Style.Grid.Length 10.0;
              max = Toffee.Style.Grid.Length 10.0;
            };
            {
              min = Toffee.Style.Grid.Length 20.0;
              max = Toffee.Style.Grid.Length 20.0;
            };
            {
              min = Toffee.Style.Grid.Length 30.0;
              max = Toffee.Style.Grid.Length 30.0;
            };
          ];
      }
  in
  let node0 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        grid_row =
          { start = Toffee.Style.Grid.Line - 4; end_ = Toffee.Style.Grid.Auto };
      }
  in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 =
    Toffee.new_leaf tree
      { Toffee.Style.default with display = Toffee.Style.Block }
  in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in
  let node2 =
    Toffee.new_leaf tree
      { Toffee.Style.default with display = Toffee.Style.Block }
  in
  let _ = Toffee.add_child tree node node2 |> Result.get_ok in
  let node3 =
    Toffee.new_leaf tree
      { Toffee.Style.default with display = Toffee.Style.Block }
  in
  let _ = Toffee.add_child tree node node3 |> Result.get_ok in
  let node4 =
    Toffee.new_leaf tree
      { Toffee.Style.default with display = Toffee.Style.Block }
  in
  let _ = Toffee.add_child tree node node4 |> Result.get_ok in
  let node5 =
    Toffee.new_leaf tree
      { Toffee.Style.default with display = Toffee.Style.Block }
  in
  let _ = Toffee.add_child tree node node5 |> Result.get_ok in
  let node6 =
    Toffee.new_leaf tree
      { Toffee.Style.default with display = Toffee.Style.Block }
  in
  let _ = Toffee.add_child tree node node6 |> Result.get_ok in
  let node7 =
    Toffee.new_leaf tree
      { Toffee.Style.default with display = Toffee.Style.Block }
  in
  let _ = Toffee.add_child tree node node7 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    Toffee.compute_layout tree node
      {
        width = Toffee.Style.Available_space.Max_content;
        height = Toffee.Style.Available_space.Max_content;
      }
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 100.0 layout.size.width;
  assert_eq ~msg:"height of node" 180.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 100.0 layout.size.width;
  assert_eq ~msg:"height of node0" 20.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 100.0 layout.size.width;
  assert_eq ~msg:"height of node1" 30.0 layout.size.height;
  assert_eq ~msg:"x of node1" 0.0 layout.location.x;
  assert_eq ~msg:"y of node1" 20.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 100.0 layout.size.width;
  assert_eq ~msg:"height of node2" 40.0 layout.size.height;
  assert_eq ~msg:"x of node2" 0.0 layout.location.x;
  assert_eq ~msg:"y of node2" 50.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 100.0 layout.size.width;
  assert_eq ~msg:"height of node3" 10.0 layout.size.height;
  assert_eq ~msg:"x of node3" 0.0 layout.location.x;
  assert_eq ~msg:"y of node3" 90.0 layout.location.y;
  let layout = Toffee.layout tree node4 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node4" 100.0 layout.size.width;
  assert_eq ~msg:"height of node4" 20.0 layout.size.height;
  assert_eq ~msg:"x of node4" 0.0 layout.location.x;
  assert_eq ~msg:"y of node4" 100.0 layout.location.y;
  let layout = Toffee.layout tree node5 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node5" 100.0 layout.size.width;
  assert_eq ~msg:"height of node5" 30.0 layout.size.height;
  assert_eq ~msg:"x of node5" 0.0 layout.location.x;
  assert_eq ~msg:"y of node5" 120.0 layout.location.y;
  let layout = Toffee.layout tree node6 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node6" 100.0 layout.size.width;
  assert_eq ~msg:"height of node6" 10.0 layout.size.height;
  assert_eq ~msg:"x of node6" 0.0 layout.location.x;
  assert_eq ~msg:"y of node6" 150.0 layout.location.y;
  let layout = Toffee.layout tree node7 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node7" 100.0 layout.size.width;
  assert_eq ~msg:"height of node7" 20.0 layout.size.height;
  assert_eq ~msg:"x of node7" 0.0 layout.location.x;
  assert_eq ~msg:"y of node7" 160.0 layout.location.y;
  ()

let test_grid_auto_rows_content_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = Toffee.create () in

  (* Create nodes *)
  let node =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Grid;
        grid_template_columns =
          [
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 100.0;
                max = Toffee.Style.Grid.Length 100.0;
              };
          ];
        grid_template_rows =
          [
            Toffee.Style.Grid.Single
              {
                min = Toffee.Style.Grid.Length 40.0;
                max = Toffee.Style.Grid.Length 40.0;
              };
          ];
        grid_auto_rows =
          [
            {
              min = Toffee.Style.Grid.Length 10.0;
              max = Toffee.Style.Grid.Length 10.0;
            };
            {
              min = Toffee.Style.Grid.Length 20.0;
              max = Toffee.Style.Grid.Length 20.0;
            };
            {
              min = Toffee.Style.Grid.Length 30.0;
              max = Toffee.Style.Grid.Length 30.0;
            };
          ];
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let node0 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        grid_row =
          { start = Toffee.Style.Grid.Line - 4; end_ = Toffee.Style.Grid.Auto };
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node node1 |> Result.get_ok in
  let node2 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node node2 |> Result.get_ok in
  let node3 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node node3 |> Result.get_ok in
  let node4 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node node4 |> Result.get_ok in
  let node5 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node node5 |> Result.get_ok in
  let node6 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node node6 |> Result.get_ok in
  let node7 =
    Toffee.new_leaf tree
      {
        Toffee.Style.default with
        display = Toffee.Style.Block;
        box_sizing = Toffee.Style.Content_box;
      }
  in
  let _ = Toffee.add_child tree node node7 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    Toffee.compute_layout tree node
      {
        width = Toffee.Style.Available_space.Max_content;
        height = Toffee.Style.Available_space.Max_content;
      }
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 100.0 layout.size.width;
  assert_eq ~msg:"height of node" 180.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 100.0 layout.size.width;
  assert_eq ~msg:"height of node0" 20.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 100.0 layout.size.width;
  assert_eq ~msg:"height of node1" 30.0 layout.size.height;
  assert_eq ~msg:"x of node1" 0.0 layout.location.x;
  assert_eq ~msg:"y of node1" 20.0 layout.location.y;
  let layout = Toffee.layout tree node2 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node2" 100.0 layout.size.width;
  assert_eq ~msg:"height of node2" 40.0 layout.size.height;
  assert_eq ~msg:"x of node2" 0.0 layout.location.x;
  assert_eq ~msg:"y of node2" 50.0 layout.location.y;
  let layout = Toffee.layout tree node3 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node3" 100.0 layout.size.width;
  assert_eq ~msg:"height of node3" 10.0 layout.size.height;
  assert_eq ~msg:"x of node3" 0.0 layout.location.x;
  assert_eq ~msg:"y of node3" 90.0 layout.location.y;
  let layout = Toffee.layout tree node4 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node4" 100.0 layout.size.width;
  assert_eq ~msg:"height of node4" 20.0 layout.size.height;
  assert_eq ~msg:"x of node4" 0.0 layout.location.x;
  assert_eq ~msg:"y of node4" 100.0 layout.location.y;
  let layout = Toffee.layout tree node5 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node5" 100.0 layout.size.width;
  assert_eq ~msg:"height of node5" 30.0 layout.size.height;
  assert_eq ~msg:"x of node5" 0.0 layout.location.x;
  assert_eq ~msg:"y of node5" 120.0 layout.location.y;
  let layout = Toffee.layout tree node6 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node6" 100.0 layout.size.width;
  assert_eq ~msg:"height of node6" 10.0 layout.size.height;
  assert_eq ~msg:"x of node6" 0.0 layout.location.x;
  assert_eq ~msg:"y of node6" 150.0 layout.location.y;
  let layout = Toffee.layout tree node7 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node7" 100.0 layout.size.width;
  assert_eq ~msg:"height of node7" 20.0 layout.size.height;
  assert_eq ~msg:"x of node7" 0.0 layout.location.x;
  assert_eq ~msg:"y of node7" 160.0 layout.location.y;
  ()

(* Export tests for aggregation *)
let tests =
  let open Alcotest in
  [
    test_case "auto_rows (border-box)" `Quick test_grid_auto_rows_border_box;
    test_case "auto_rows (content-box)" `Quick test_grid_auto_rows_content_box;
  ]
