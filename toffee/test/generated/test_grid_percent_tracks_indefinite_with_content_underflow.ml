(* Generated test for grid_percent_tracks_indefinite_with_content_underflow in grid layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee

let test_grid_percent_tracks_indefinite_with_content_underflow_border_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = new_tree () in

  (* Create nodes *)
  let node =
    new_leaf tree
      (Style.make ~display:Style.Display.Grid
         ~grid_template_columns:
           [
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.percent 0.1);
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.percent 0.2);
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.percent 0.3);
           ]
         ~grid_template_rows:
           [
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.percent 0.3);
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.percent 0.6);
           ]
         ())
    |> Result.get_ok
  in
  let node0 =
    new_leaf tree
      (Style.make
         ~grid_column:
           {
             start = Style.Grid.Placement.line 1;
             end_ = Style.Grid.Placement.auto;
           }
         ~grid_row:
           {
             start = Style.Grid.Placement.line 1;
             end_ = Style.Grid.Placement.auto;
           }
         ~size:
           {
             width = Style.Dimension.length 100.0;
             height = Style.Dimension.length 100.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node0 |> Result.get_ok in
  let node1 =
    new_leaf tree
      (Style.make
         ~grid_column:
           {
             start = Style.Grid.Placement.line 1;
             end_ = Style.Grid.Placement.auto;
           }
         ~grid_row:
           {
             start = Style.Grid.Placement.line 1;
             end_ = Style.Grid.Placement.auto;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node1 |> Result.get_ok in
  let node2 = new_leaf tree Style.default |> Result.get_ok in
  let _ = add_child tree node node2 |> Result.get_ok in
  let node3 = new_leaf tree Style.default |> Result.get_ok in
  let _ = add_child tree node node3 |> Result.get_ok in
  let node4 = new_leaf tree Style.default |> Result.get_ok in
  let _ = add_child tree node node4 |> Result.get_ok in
  let node5 = new_leaf tree Style.default |> Result.get_ok in
  let _ = add_child tree node node5 |> Result.get_ok in
  let node6 = new_leaf tree Style.default |> Result.get_ok in
  let _ = add_child tree node node6 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    compute_layout tree node
      {
        width = Available_space.Max_content;
        height = Available_space.Max_content;
      }
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout_result = layout tree node |> Result.get_ok in
  assert_eq ~msg:"width of node" 100.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node" 100.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node0 |> Result.get_ok in
  assert_eq ~msg:"width of node0" 100.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node0" 100.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node0" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node0" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node1 |> Result.get_ok in
  assert_eq ~msg:"width of node1" 10.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node1" 30.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node1" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node1" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node2 |> Result.get_ok in
  assert_eq ~msg:"width of node2" 20.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node2" 30.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node2" 10.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node2" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node3 |> Result.get_ok in
  assert_eq ~msg:"width of node3" 30.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node3" 30.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node3" 30.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node3" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node4 |> Result.get_ok in
  assert_eq ~msg:"width of node4" 10.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node4" 60.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node4" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node4" 30.0 (Layout.location layout_result).y;
  let layout_result = layout tree node5 |> Result.get_ok in
  assert_eq ~msg:"width of node5" 20.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node5" 60.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node5" 10.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node5" 30.0 (Layout.location layout_result).y;
  let layout_result = layout tree node6 |> Result.get_ok in
  assert_eq ~msg:"width of node6" 30.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node6" 60.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node6" 30.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node6" 30.0 (Layout.location layout_result).y;
  ()

let test_grid_percent_tracks_indefinite_with_content_underflow_content_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in

  let tree = new_tree () in

  (* Create nodes *)
  let node =
    new_leaf tree
      (Style.make ~display:Style.Display.Grid
         ~grid_template_columns:
           [
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.percent 0.1);
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.percent 0.2);
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.percent 0.3);
           ]
         ~grid_template_rows:
           [
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.percent 0.3);
             Style.Grid.Template_component.single
               (Style.Grid.Track_sizing_function.percent 0.6);
           ]
         ())
    |> Result.get_ok
  in
  let node0 =
    new_leaf tree
      (Style.make
         ~grid_column:
           {
             start = Style.Grid.Placement.line 1;
             end_ = Style.Grid.Placement.auto;
           }
         ~grid_row:
           {
             start = Style.Grid.Placement.line 1;
             end_ = Style.Grid.Placement.auto;
           }
         ~size:
           {
             width = Style.Dimension.length 100.0;
             height = Style.Dimension.length 100.0;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node0 |> Result.get_ok in
  let node1 =
    new_leaf tree
      (Style.make
         ~grid_column:
           {
             start = Style.Grid.Placement.line 1;
             end_ = Style.Grid.Placement.auto;
           }
         ~grid_row:
           {
             start = Style.Grid.Placement.line 1;
             end_ = Style.Grid.Placement.auto;
           }
         ())
    |> Result.get_ok
  in
  let _ = add_child tree node node1 |> Result.get_ok in
  let node2 = new_leaf tree Style.default |> Result.get_ok in
  let _ = add_child tree node node2 |> Result.get_ok in
  let node3 = new_leaf tree Style.default |> Result.get_ok in
  let _ = add_child tree node node3 |> Result.get_ok in
  let node4 = new_leaf tree Style.default |> Result.get_ok in
  let _ = add_child tree node node4 |> Result.get_ok in
  let node5 = new_leaf tree Style.default |> Result.get_ok in
  let _ = add_child tree node node5 |> Result.get_ok in
  let node6 = new_leaf tree Style.default |> Result.get_ok in
  let _ = add_child tree node node6 |> Result.get_ok in

  (* Compute layout *)
  let _ =
    compute_layout tree node
      {
        width = Available_space.Max_content;
        height = Available_space.Max_content;
      }
    |> Result.get_ok
  in

  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  print_tree tree node;
  Printf.printf "\n";

  (* Verify layout *)
  let layout_result = layout tree node |> Result.get_ok in
  assert_eq ~msg:"width of node" 100.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node" 100.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node0 |> Result.get_ok in
  assert_eq ~msg:"width of node0" 100.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node0" 100.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node0" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node0" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node1 |> Result.get_ok in
  assert_eq ~msg:"width of node1" 10.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node1" 30.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node1" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node1" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node2 |> Result.get_ok in
  assert_eq ~msg:"width of node2" 20.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node2" 30.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node2" 10.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node2" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node3 |> Result.get_ok in
  assert_eq ~msg:"width of node3" 30.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node3" 30.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node3" 30.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node3" 0.0 (Layout.location layout_result).y;
  let layout_result = layout tree node4 |> Result.get_ok in
  assert_eq ~msg:"width of node4" 10.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node4" 60.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node4" 0.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node4" 30.0 (Layout.location layout_result).y;
  let layout_result = layout tree node5 |> Result.get_ok in
  assert_eq ~msg:"width of node5" 20.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node5" 60.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node5" 10.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node5" 30.0 (Layout.location layout_result).y;
  let layout_result = layout tree node6 |> Result.get_ok in
  assert_eq ~msg:"width of node6" 30.0 (Layout.size layout_result).width;
  assert_eq ~msg:"height of node6" 60.0 (Layout.size layout_result).height;
  assert_eq ~msg:"x of node6" 30.0 (Layout.location layout_result).x;
  assert_eq ~msg:"y of node6" 30.0 (Layout.location layout_result).y;
  ()

(* Export tests for aggregation *)
let tests =
  let open Alcotest in
  [
    test_case "percent_tracks_indefinite_with_content_underflow (border-box)"
      `Quick
      test_grid_percent_tracks_indefinite_with_content_underflow_border_box;
    test_case "percent_tracks_indefinite_with_content_underflow (content-box)"
      `Quick
      test_grid_percent_tracks_indefinite_with_content_underflow_content_box;
  ]
