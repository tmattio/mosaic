
(* Generated test for flex_basis_zero_undefined_main_size in flex layout *)
(* Do not edit this file directly. It is generated by gentest.js *)

open Toffee




let test_flex_basis_zero_undefined_main_size_border_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in
  
  let tree = Toffee.create () in
  
  
  (* Create nodes *)
  let node = Toffee.new_leaf tree ({ Toffee.Style.default with flex_direction = Toffee.Style.Flex.Row }) in
  let node0 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_direction = Toffee.Style.Flex.Column; flex_basis = Toffee.Style.Dimension.length 0.0 }) in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 = Toffee.new_leaf tree ({ Toffee.Style.default with size = { width = Toffee.Style.Dimension.length 100.0; height = Toffee.Style.Dimension.length 50.0 } }) in
  let _ = Toffee.add_child tree node0 node1 |> Result.get_ok in
  
  (* Compute layout *)
  let _ = Toffee.compute_layout tree node {
    width = Toffee.Style.Available_space.Max_content;
    height = Toffee.Style.Available_space.Max_content;
  } |> Result.get_ok in
  
  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";
  
  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 100.0 layout.size.width;
  assert_eq ~msg:"height of node" 50.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 100.0 layout.size.width;
  assert_eq ~msg:"height of node0" 50.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 100.0 layout.size.width;
  assert_eq ~msg:"height of node1" 50.0 layout.size.height;
  assert_eq ~msg:"x of node1" 0.0 layout.location.x;
  assert_eq ~msg:"y of node1" 0.0 layout.location.y;
  ()



let test_flex_basis_zero_undefined_main_size_content_box () =
  (* Setup test helpers *)
  let assert_eq ~msg expected actual =
    let open Alcotest in
    check (float 0.001) msg expected actual
  in
  
  let tree = Toffee.create () in
  
  
  (* Create nodes *)
  let node = Toffee.new_leaf tree ({ Toffee.Style.default with flex_direction = Toffee.Style.Flex.Row; box_sizing = Toffee.Style.Content_box }) in
  let node0 = Toffee.new_leaf tree ({ Toffee.Style.default with flex_direction = Toffee.Style.Flex.Column; flex_basis = Toffee.Style.Dimension.length 0.0; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node node0 |> Result.get_ok in
  let node1 = Toffee.new_leaf tree ({ Toffee.Style.default with size = { width = Toffee.Style.Dimension.length 100.0; height = Toffee.Style.Dimension.length 50.0 }; box_sizing = Toffee.Style.Content_box }) in
  let _ = Toffee.add_child tree node0 node1 |> Result.get_ok in
  
  (* Compute layout *)
  let _ = Toffee.compute_layout tree node {
    width = Toffee.Style.Available_space.Max_content;
    height = Toffee.Style.Available_space.Max_content;
  } |> Result.get_ok in
  
  (* Print tree for debugging *)
  Printf.printf "\nComputed tree:\n";
  Toffee.print_tree tree node;
  Printf.printf "\n";
  
  (* Verify layout *)
  let layout = Toffee.layout tree node in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node" 100.0 layout.size.width;
  assert_eq ~msg:"height of node" 50.0 layout.size.height;
  assert_eq ~msg:"x of node" 0.0 layout.location.x;
  assert_eq ~msg:"y of node" 0.0 layout.location.y;
  let layout = Toffee.layout tree node0 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node0" 100.0 layout.size.width;
  assert_eq ~msg:"height of node0" 50.0 layout.size.height;
  assert_eq ~msg:"x of node0" 0.0 layout.location.x;
  assert_eq ~msg:"y of node0" 0.0 layout.location.y;
  let layout = Toffee.layout tree node1 in
  let layout = layout |> Result.get_ok in
  assert_eq ~msg:"width of node1" 100.0 layout.size.width;
  assert_eq ~msg:"height of node1" 50.0 layout.size.height;
  assert_eq ~msg:"x of node1" 0.0 layout.location.x;
  assert_eq ~msg:"y of node1" 0.0 layout.location.y;
  ()


(* Test runner *)
let () =
  let open Alcotest in
  run "Toffee flex_basis_zero_undefined_main_size Test" [
    "flex_flex_basis_zero_undefined_main_size", [
      test_case "flex_basis_zero_undefined_main_size (border-box)" `Quick test_flex_basis_zero_undefined_main_size_border_box;
      test_case "flex_basis_zero_undefined_main_size (content-box)" `Quick test_flex_basis_zero_undefined_main_size_content_box;
    ];
  ]
